{
  "id": "EUVD-2025-29593",
  "enisaUuid": "ae1e42a8-f6a3-3d01-9962-b26c9a11fc4e",
  "description": "In the Linux kernel, the following vulnerability has been resolved:\n\nperf: Avoid undefined behavior from stopping/starting inactive events\n\nCalling pmu->start()/stop() on perf events in PERF_EVENT_STATE_OFF can\nleave event->hw.idx at -1. When PMU drivers later attempt to use this\nnegative index as a shift exponent in bitwise operations, it leads to UBSAN\nshift-out-of-bounds reports.\n\nThe issue is a logical flaw in how event groups handle throttling when some\nmembers are intentionally disabled. Based on the analysis and the\nreproducer provided by Mark Rutland (this issue on both arm64 and x86-64).\n\nThe scenario unfolds as follows:\n\n 1. A group leader event is configured with a very aggressive sampling\n    period (e.g., sample_period = 1). This causes frequent interrupts and\n    triggers the throttling mechanism.\n 2. A child event in the same group is created in a disabled state\n    (.disabled = 1). This event remains in PERF_EVENT_STATE_OFF.\n    Since it hasn't been scheduled onto the PMU, its event->hw.idx remains\n    initialized at -1.\n 3. When throttling occurs, perf_event_throttle_group() and later\n    perf_event_unthrottle_group() iterate through all siblings, including\n    the disabled child event.\n 4. perf_event_throttle()/unthrottle() are called on this inactive child\n    event, which then call event->pmu->start()/stop().\n 5. The PMU driver receives the event with hw.idx == -1 and attempts to\n    use it as a shift exponent. e.g., in macros like PMCNTENSET(idx),\n    leading to the UBSAN report.\n\nThe throttling mechanism attempts to start/stop events that are not\nactively scheduled on the hardware.\n\nMove the state check into perf_event_throttle()/perf_event_unthrottle() so\nthat inactive events are skipped entirely. This ensures only active events\nwith a valid hw.idx are processed, preventing undefined behavior and\nsilencing UBSAN warnings. The corrected check ensures true before\nproceeding with PMU operations.\n\nThe problem can be reproduced with the syzkaller reproducer:",
  "datePublished": "Sep 16, 2025, 1:00:20 PM",
  "dateUpdated": "Sep 29, 2025, 6:00:21 AM",
  "baseScore": 0.0,
  "references": [
    "https://git.kernel.org/stable/c/d689135aa9c5e4e0eab5a92bbe35dab0c8d6677f",
    "https://git.kernel.org/stable/c/b64fdd422a85025b5e91ead794db9d3ef970e369",
    "https://nvd.nist.gov/vuln/detail/CVE-2025-39821"
  ],
  "aliases": [
    "CVE-2025-39821"
  ],
  "assigner": "Linux",
  "epss": 0.03,
  "enisaIdProduct": [
    {
      "id": "0063a8e4-b46d-3bb4-bbd8-03aca1ae47a9",
      "product": {
        "name": "Linux"
      },
      "product_version": "patch: 6.16.5"
    },
    {
      "id": "35ef1e27-82ce-3725-b9f4-a3c51a719f11",
      "product": {
        "name": "Linux"
      },
      "product_version": "patch: 6.17-rc3"
    },
    {
      "id": "3ae9c93e-eb09-3674-820b-9609a65b063a",
      "product": {
        "name": "Linux"
      },
      "product_version": "patch: 0"
    },
    {
      "id": "4a92e1f0-67fb-3617-8d7f-54739695f664",
      "product": {
        "name": "Linux"
      },
      "product_version": "6.16"
    },
    {
      "id": "5201a6f9-94a5-3585-adc1-7d330bfa0b23",
      "product": {
        "name": "Linux"
      },
      "product_version": "9734e25fbf5ae68eb04234b2cd14a4b36ab89141 <d689135aa9c5e4e0eab5a92bbe35dab0c8d6677f"
    },
    {
      "id": "bc97967f-6fe8-3794-8bd1-816f0147d046",
      "product": {
        "name": "Linux"
      },
      "product_version": "9734e25fbf5ae68eb04234b2cd14a4b36ab89141 <b64fdd422a85025b5e91ead794db9d3ef970e369"
    },
    {
      "id": "feae35f4-85bd-32a3-a457-3fa4ccb111ae",
      "product": {
        "name": "Linux"
      },
      "product_version": "patch: 6.17"
    }
  ],
  "enisaIdVendor": [
    {
      "id": "18546a25-f491-3d36-9c41-619b0d352f02",
      "vendor": {
        "name": "Linux"
      }
    }
  ]
}