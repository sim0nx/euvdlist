{
  "id": "EUVD-2025-32889",
  "enisaUuid": "016700b8-23d5-3c72-a305-7ccb90429f77",
  "description": "In the Linux kernel, the following vulnerability has been resolved:\n\ni40e: remove read access to debugfs files\n\nThe 'command' and 'netdev_ops' debugfs files are a legacy debugging\ninterface supported by the i40e driver since its early days by commit\n02e9c290814c (\"i40e: debugfs interface\").\n\nBoth of these debugfs files provide a read handler which is mostly useless,\nand which is implemented with questionable logic. They both use a static\n256 byte buffer which is initialized to the empty string. In the case of\nthe 'command' file this buffer is literally never used and simply wastes\nspace. In the case of the 'netdev_ops' file, the last command written is\nsaved here.\n\nOn read, the files contents are presented as the name of the device\nfollowed by a colon and then the contents of their respective static\nbuffer. For 'command' this will always be \"<device>: \". For 'netdev_ops',\nthis will be \"<device>: <last command written>\". But note the buffer is\nshared between all devices operated by this module. At best, it is mostly\nmeaningless information, and at worse it could be accessed simultaneously\nas there doesn't appear to be any locking mechanism.\n\nWe have also recently received multiple reports for both read functions\nabout their use of snprintf and potential overflow that could result in\nreading arbitrary kernel memory. For the 'command' file, this is definitely\nimpossible, since the static buffer is always zero and never written to.\nFor the 'netdev_ops' file, it does appear to be possible, if the user\ncarefully crafts the command input, it will be copied into the buffer,\nwhich could be large enough to cause snprintf to truncate, which then\ncauses the copy_to_user to read beyond the length of the buffer allocated\nby kzalloc.\n\nA minimal fix would be to replace snprintf() with scnprintf() which would\ncap the return to the number of bytes written, preventing an overflow. A\nmore involved fix would be to drop the mostly useless static buffers,\nsaving 512 bytes and modifying the read functions to stop needing those as\ninput.\n\nInstead, lets just completely drop the read access to these files. These\nare debug interfaces exposed as part of debugfs, and I don't believe that\ndropping read access will break any script, as the provided output is\npretty useless. You can find the netdev name through other more standard\ninterfaces, and the 'netdev_ops' interface can easily result in garbage if\nyou issue simultaneous writes to multiple devices at once.\n\nIn order to properly remove the i40e_dbg_netdev_ops_buf, we need to\nrefactor its write function to avoid using the static buffer. Instead, use\nthe same logic as the i40e_dbg_command_write, with an allocated buffer.\nUpdate the code to use this instead of the static buffer, and ensure we\nfree the buffer on exit. This fixes simultaneous writes to 'netdev_ops' on\nmultiple devices, and allows us to remove the now unused static buffer\nalong with removing the read access.",
  "datePublished": "Oct 1, 2025, 7:42:48 AM",
  "dateUpdated": "Oct 1, 2025, 7:42:48 AM",
  "baseScore": 0.0,
  "references": [
    "https://nvd.nist.gov/vuln/detail/CVE-2025-39901",
    "https://git.kernel.org/stable/c/70d3dad7d5ad077965d7a63eed1942b7ba49bfb4",
    "https://git.kernel.org/stable/c/7d190963b80f4cd99d7008615600aa7cc993c6ba",
    "https://git.kernel.org/stable/c/9fcdb1c3c4ba134434694c001dbff343f1ffa319"
  ],
  "aliases": [
    "CVE-2025-39901",
    "GHSA-xm78-498q-x929"
  ],
  "assigner": "Linux",
  "epss": 0.02,
  "enisaIdProduct": [
    {
      "id": "1872e72f-ec5c-355b-a19a-ffc7b04704f2",
      "product": {
        "name": "Linux"
      },
      "product_version": "patch: 0"
    },
    {
      "id": "43721f4c-3899-3ea7-9885-b44c117a0a06",
      "product": {
        "name": "Linux"
      },
      "product_version": "02e9c290814cc143ceccecb14eac3e7a05da745e <7d190963b80f4cd99d7008615600aa7cc993c6ba"
    },
    {
      "id": "501247d8-1ad1-3198-b567-7e0ee09632f7",
      "product": {
        "name": "Linux"
      },
      "product_version": "02e9c290814cc143ceccecb14eac3e7a05da745e <70d3dad7d5ad077965d7a63eed1942b7ba49bfb4"
    },
    {
      "id": "5e4a6ea1-c718-3ec6-89c6-5b3f6ae2defa",
      "product": {
        "name": "Linux"
      },
      "product_version": "3.12"
    },
    {
      "id": "6c8ad744-b0d9-3629-8b8f-45cc2bcc6a81",
      "product": {
        "name": "Linux"
      },
      "product_version": "patch: 6.16.6"
    },
    {
      "id": "94b3dac6-8394-3832-94a0-5b0d87a52eaa",
      "product": {
        "name": "Linux"
      },
      "product_version": "02e9c290814cc143ceccecb14eac3e7a05da745e <9fcdb1c3c4ba134434694c001dbff343f1ffa319"
    },
    {
      "id": "ebe09ce7-7424-3c3e-aedd-28f25533d9b7",
      "product": {
        "name": "Linux"
      },
      "product_version": "patch: 6.17"
    },
    {
      "id": "f11e4e0a-fed3-3777-8db0-318605829ce0",
      "product": {
        "name": "Linux"
      },
      "product_version": "patch: 6.12.46"
    }
  ],
  "enisaIdVendor": [
    {
      "id": "1080871d-a3b6-302d-b341-54b442949753",
      "vendor": {
        "name": "Linux"
      }
    }
  ]
}