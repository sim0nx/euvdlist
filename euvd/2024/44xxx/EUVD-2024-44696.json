{
  "id": "EUVD-2024-44696",
  "enisaUuid": "f28fe161-1a21-33b2-999c-14afc0eeb44b",
  "description": "In the Linux kernel, the following vulnerability has been resolved:\n\narm64: probes: Fix uprobes for big-endian kernels\n\nThe arm64 uprobes code is broken for big-endian kernels as it doesn't\nconvert the in-memory instruction encoding (which is always\nlittle-endian) into the kernel's native endianness before analyzing and\nsimulating instructions. This may result in a few distinct problems:\n\n* The kernel may may erroneously reject probing an instruction which can\n  safely be probed.\n\n* The kernel may erroneously erroneously permit stepping an\n  instruction out-of-line when that instruction cannot be stepped\n  out-of-line safely.\n\n* The kernel may erroneously simulate instruction incorrectly dur to\n  interpretting the byte-swapped encoding.\n\nThe endianness mismatch isn't caught by the compiler or sparse because:\n\n* The arch_uprobe::{insn,ixol} fields are encoded as arrays of u8, so\n  the compiler and sparse have no idea these contain a little-endian\n  32-bit value. The core uprobes code populates these with a memcpy()\n  which similarly does not handle endianness.\n\n* While the uprobe_opcode_t type is an alias for __le32, both\n  arch_uprobe_analyze_insn() and arch_uprobe_skip_sstep() cast from u8[]\n  to the similarly-named probe_opcode_t, which is an alias for u32.\n  Hence there is no endianness conversion warning.\n\nFix this by changing the arch_uprobe::{insn,ixol} fields to __le32 and\nadding the appropriate __le32_to_cpu() conversions prior to consuming\nthe instruction encoding. The core uprobes copies these fields as opaque\nranges of bytes, and so is unaffected by this change.\n\nAt the same time, remove MAX_UINSN_BYTES and consistently use\nAARCH64_INSN_SIZE for clarity.\n\nTested with the following:\n\n| #include <stdio.h>\n| #include <stdbool.h>\n|\n| #define noinline __attribute__((noinline))\n|\n| static noinline void *adrp_self(void)\n| {\n|         void *addr;\n|\n|         asm volatile(\n|         \"       adrp    %x0, adrp_self\\n\"\n|         \"       add     %x0, %x0, :lo12:adrp_self\\n\"\n|         : \"=r\" (addr));\n| }\n|\n|\n| int main(int argc, char *argv)\n| {\n|         void *ptr = adrp_self();\n|         bool equal = (ptr == adrp_self);\n|\n|         printf(\"adrp_self   => %p\\n\"\n|                \"adrp_self() => %p\\n\"\n|                \"%s\\n\",\n|                adrp_self, ptr, equal ? \"EQUAL\" : \"NOT EQUAL\");\n|\n|         return 0;\n| }\n\n.... where the adrp_self() function was compiled to:\n\n| 00000000004007e0 <adrp_self>:\n|   4007e0:       90000000        adrp    x0, 400000 <__ehdr_start>\n|   4007e4:       911f8000        add     x0, x0, #0x7e0\n|   4007e8:       d65f03c0        ret\n\nBefore this patch, the ADRP is not recognized, and is assumed to be\nsteppable, resulting in corruption of the result:\n\n| # ./adrp-self\n| adrp_self   => 0x4007e0\n| adrp_self() => 0x4007e0\n| EQUAL\n| # echo 'p /root/adrp-self:0x007e0' > /sys/kernel/tracing/uprobe_events\n| # echo 1 > /sys/kernel/tracing/events/uprobes/enable\n| # ./adrp-self\n| adrp_self   => 0x4007e0\n| adrp_self() => 0xffffffffff7e0\n| NOT EQUAL\n\nAfter this patch, the ADRP is correctly recognized and simulated:\n\n| # ./adrp-self\n| adrp_self   => 0x4007e0\n| adrp_self() => 0x4007e0\n| EQUAL\n| #\n| # echo 'p /root/adrp-self:0x007e0' > /sys/kernel/tracing/uprobe_events\n| # echo 1 > /sys/kernel/tracing/events/uprobes/enable\n| # ./adrp-self\n| adrp_self   => 0x4007e0\n| adrp_self() => 0x4007e0\n| EQUAL",
  "datePublished": "Nov 8, 2024, 5:54:09 AM",
  "dateUpdated": "Oct 1, 2025, 8:27:08 PM",
  "baseScore": 5.5,
  "baseScoreVersion": "3.1",
  "baseScoreVector": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H",
  "references": [
    "https://git.kernel.org/stable/c/b6a638cb600e13f94b5464724eaa6ab7f3349ca2",
    "https://git.kernel.org/stable/c/e6ab336213918575124d6db43dc5d3554526242e",
    "https://git.kernel.org/stable/c/cf9ddf9ed94c15564a05bbf6e9f18dffa0c7df80",
    "https://git.kernel.org/stable/c/cf60d19d40184e43d9a624e55a0da73be09e938d",
    "https://git.kernel.org/stable/c/14841bb7a531b96e2dde37423a3b33e75147c60d",
    "https://git.kernel.org/stable/c/8165bf83b8a64be801d59cd2532b0d1ffed74d00",
    "https://git.kernel.org/stable/c/3d2530c65be04e93720e30f191a7cf1a3aa8b51c",
    "https://git.kernel.org/stable/c/13f8f1e05f1dc36dbba6cba0ae03354c0dafcde7"
  ],
  "aliases": [
    "CVE-2024-50194"
  ],
  "assigner": "Linux",
  "epss": 0.05,
  "enisaIdProduct": [
    {
      "id": "07edf395-8e1b-3142-95e0-a1c9480ff7a6",
      "product": {
        "name": "Linux"
      },
      "product_version": "patch: 5.15.170"
    },
    {
      "id": "288a2cb2-7523-3efe-a224-d974e41f8161",
      "product": {
        "name": "Linux"
      },
      "product_version": "patch: 6.12"
    },
    {
      "id": "2c3c7faf-8e9e-30e9-92e6-99e27e8ee6df",
      "product": {
        "name": "Linux"
      },
      "product_version": "9842ceae9fa8deae141533d52a6ead7666962c09 <e6ab336213918575124d6db43dc5d3554526242e"
    },
    {
      "id": "2cf3f318-3af7-3032-8d5e-53c5711fc3a3",
      "product": {
        "name": "Linux"
      },
      "product_version": "9842ceae9fa8deae141533d52a6ead7666962c09 <3d2530c65be04e93720e30f191a7cf1a3aa8b51c"
    },
    {
      "id": "35ea885b-8d79-37a4-901b-e8f39d5d2a9f",
      "product": {
        "name": "Linux"
      },
      "product_version": "9842ceae9fa8deae141533d52a6ead7666962c09 <13f8f1e05f1dc36dbba6cba0ae03354c0dafcde7"
    },
    {
      "id": "3e56e923-970f-3906-8303-68f2c45f496a",
      "product": {
        "name": "Linux"
      },
      "product_version": "patch: 6.11.5"
    },
    {
      "id": "44d1e7a6-4614-3277-bfc1-e33bbb9cc714",
      "product": {
        "name": "Linux"
      },
      "product_version": "patch: 6.1.115"
    },
    {
      "id": "5355ad56-958b-378f-a689-38128c2dc80e",
      "product": {
        "name": "Linux"
      },
      "product_version": "patch: 4.19.323"
    },
    {
      "id": "75366354-df10-3d32-904d-ab3a3e79a84f",
      "product": {
        "name": "Linux"
      },
      "product_version": "9842ceae9fa8deae141533d52a6ead7666962c09 <8165bf83b8a64be801d59cd2532b0d1ffed74d00"
    },
    {
      "id": "81e9cc73-7f1b-352a-9f89-ee1d12d51ac1",
      "product": {
        "name": "Linux"
      },
      "product_version": "9842ceae9fa8deae141533d52a6ead7666962c09 <b6a638cb600e13f94b5464724eaa6ab7f3349ca2"
    },
    {
      "id": "834a6d56-0da6-3b9a-8eb5-d5e7a968517d",
      "product": {
        "name": "Linux"
      },
      "product_version": "9842ceae9fa8deae141533d52a6ead7666962c09 <cf9ddf9ed94c15564a05bbf6e9f18dffa0c7df80"
    },
    {
      "id": "8f74769a-847e-3f5a-8ac5-b7b24e2d5184",
      "product": {
        "name": "Linux"
      },
      "product_version": "patch: 5.4.285"
    },
    {
      "id": "b45e5020-382c-350a-80d8-453acc365a4b",
      "product": {
        "name": "Linux"
      },
      "product_version": "patch: 5.10.229"
    },
    {
      "id": "b732c2fd-c444-3d1f-9002-8e61852d2e56",
      "product": {
        "name": "Linux"
      },
      "product_version": "patch: 0"
    },
    {
      "id": "be64a9bb-dbe5-344e-a2c3-e105832788fb",
      "product": {
        "name": "Linux"
      },
      "product_version": "4.10"
    },
    {
      "id": "d47d7a69-ae03-30fc-830d-419e3b748dbe",
      "product": {
        "name": "Linux"
      },
      "product_version": "9842ceae9fa8deae141533d52a6ead7666962c09 <14841bb7a531b96e2dde37423a3b33e75147c60d"
    },
    {
      "id": "e1b58f86-e9c7-3a77-be9d-24df35139f6d",
      "product": {
        "name": "Linux"
      },
      "product_version": "9842ceae9fa8deae141533d52a6ead7666962c09 <cf60d19d40184e43d9a624e55a0da73be09e938d"
    },
    {
      "id": "f02079f7-9358-3b28-85ac-fd51ee6adf63",
      "product": {
        "name": "Linux"
      },
      "product_version": "patch: 6.6.58"
    }
  ],
  "enisaIdVendor": [
    {
      "id": "9532ba69-4e42-3365-9a59-20acb7fadac4",
      "vendor": {
        "name": "Linux"
      }
    }
  ]
}