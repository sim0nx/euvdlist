{
  "id": "EUVD-2025-13037",
  "enisaUuid": "c18098cb-b889-34bf-8802-d92f8f6735fb",
  "description": "In the Linux kernel, the following vulnerability has been resolved:\n\nnet: dsa: free routing table on probe failure\n\nIf complete = true in dsa_tree_setup(), it means that we are the last\nswitch of the tree which is successfully probing, and we should be\nsetting up all switches from our probe path.\n\nAfter \"complete\" becomes true, dsa_tree_setup_cpu_ports() or any\nsubsequent function may fail. If that happens, the entire tree setup is\nin limbo: the first N-1 switches have successfully finished probing\n(doing nothing but having allocated persistent memory in the tree's\ndst->ports, and maybe dst->rtable), and switch N failed to probe, ending\nthe tree setup process before anything is tangible from the user's PoV.\n\nIf switch N fails to probe, its memory (ports) will be freed and removed\nfrom dst->ports. However, the dst->rtable elements pointing to its ports,\nas created by dsa_link_touch(), will remain there, and will lead to\nuse-after-free if dereferenced.\n\nIf dsa_tree_setup_switches() returns -EPROBE_DEFER, which is entirely\npossible because that is where ds->ops->setup() is, we get a kasan\nreport like this:\n\n==================================================================\nBUG: KASAN: slab-use-after-free in mv88e6xxx_setup_upstream_port+0x240/0x568\nRead of size 8 at addr ffff000004f56020 by task kworker/u8:3/42\n\nCall trace:\n __asan_report_load8_noabort+0x20/0x30\n mv88e6xxx_setup_upstream_port+0x240/0x568\n mv88e6xxx_setup+0xebc/0x1eb0\n dsa_register_switch+0x1af4/0x2ae0\n mv88e6xxx_register_switch+0x1b8/0x2a8\n mv88e6xxx_probe+0xc4c/0xf60\n mdio_probe+0x78/0xb8\n really_probe+0x2b8/0x5a8\n __driver_probe_device+0x164/0x298\n driver_probe_device+0x78/0x258\n __device_attach_driver+0x274/0x350\n\nAllocated by task 42:\n __kasan_kmalloc+0x84/0xa0\n __kmalloc_cache_noprof+0x298/0x490\n dsa_switch_touch_ports+0x174/0x3d8\n dsa_register_switch+0x800/0x2ae0\n mv88e6xxx_register_switch+0x1b8/0x2a8\n mv88e6xxx_probe+0xc4c/0xf60\n mdio_probe+0x78/0xb8\n really_probe+0x2b8/0x5a8\n __driver_probe_device+0x164/0x298\n driver_probe_device+0x78/0x258\n __device_attach_driver+0x274/0x350\n\nFreed by task 42:\n __kasan_slab_free+0x48/0x68\n kfree+0x138/0x418\n dsa_register_switch+0x2694/0x2ae0\n mv88e6xxx_register_switch+0x1b8/0x2a8\n mv88e6xxx_probe+0xc4c/0xf60\n mdio_probe+0x78/0xb8\n really_probe+0x2b8/0x5a8\n __driver_probe_device+0x164/0x298\n driver_probe_device+0x78/0x258\n __device_attach_driver+0x274/0x350\n\nThe simplest way to fix the bug is to delete the routing table in its\nentirety. dsa_tree_setup_routing_table() has no problem in regenerating\nit even if we deleted links between ports other than those of switch N,\nbecause dsa_link_touch() first checks whether the port pair already\nexists in dst->rtable, allocating if not.\n\nThe deletion of the routing table in its entirety already exists in\ndsa_tree_teardown(), so refactor that into a function that can also be\ncalled from the tree setup error path.\n\nIn my analysis of the commit to blame, it is the one which added\ndsa_link elements to dst->rtable. Prior to that, each switch had its own\nds->rtable which is freed when the switch fails to probe. But the tree\nis potentially persistent memory.",
  "datePublished": "May 1, 2025, 1:07:20 PM",
  "dateUpdated": "May 4, 2025, 7:32:34 AM",
  "baseScore": 0.0,
  "references": [
    "https://nvd.nist.gov/vuln/detail/CVE-2025-37786",
    "https://git.kernel.org/stable/c/5c8066fbdb9653c6e9a224bdcd8f9c91a484f0de",
    "https://git.kernel.org/stable/c/8bf108d7161ffc6880ad13a0cc109de3cf631727",
    "https://git.kernel.org/stable/c/a038f5f15af455dfe35bc68549e02b950978700a",
    "https://git.kernel.org/stable/c/fb12b460ec46c9efad98de6d9ba349691db51dc7"
  ],
  "aliases": [
    "CVE-2025-37786",
    "GHSA-7mv8-qr93-j282"
  ],
  "assigner": "Linux",
  "epss": 0.03,
  "enisaIdProduct": [
    {
      "id": "039a0ab8-b79b-3864-ab57-131074e5d938",
      "product": {
        "name": "Linux"
      },
      "product_version": "patch: 6.14.4"
    },
    {
      "id": "13653ac7-df72-36d5-9266-0998e548579f",
      "product": {
        "name": "Linux"
      },
      "product_version": "patch: 6.15-rc3"
    },
    {
      "id": "1ef005af-b4b4-3543-acc1-02cb435447f5",
      "product": {
        "name": "Linux"
      },
      "product_version": "c5f51765a1f60b701840544faf3ca63204b8dc3c <fb12b460ec46c9efad98de6d9ba349691db51dc7"
    },
    {
      "id": "25b37552-0ae2-3cbf-b5ed-8806314a281d",
      "product": {
        "name": "Linux"
      },
      "product_version": "patch: 6.6.88"
    },
    {
      "id": "2d9228e8-f68f-37a7-93c4-4b3aed08486c",
      "product": {
        "name": "Linux"
      },
      "product_version": "c5f51765a1f60b701840544faf3ca63204b8dc3c <a038f5f15af455dfe35bc68549e02b950978700a"
    },
    {
      "id": "3876ee87-f22f-3181-a016-44bb0849d8da",
      "product": {
        "name": "Linux"
      },
      "product_version": "5.5"
    },
    {
      "id": "69413d12-3740-39af-aab4-f282193bc3ba",
      "product": {
        "name": "Linux"
      },
      "product_version": "c5f51765a1f60b701840544faf3ca63204b8dc3c <5c8066fbdb9653c6e9a224bdcd8f9c91a484f0de"
    },
    {
      "id": "c687c2b8-618b-33db-8a7f-64227ecc6ba5",
      "product": {
        "name": "Linux"
      },
      "product_version": "patch: 6.12.25"
    },
    {
      "id": "d4d2d1c6-7b7c-334e-bed8-d366d1ebf095",
      "product": {
        "name": "Linux"
      },
      "product_version": "c5f51765a1f60b701840544faf3ca63204b8dc3c <8bf108d7161ffc6880ad13a0cc109de3cf631727"
    },
    {
      "id": "df3dd05a-620f-3b92-b6cf-3c3bc8721830",
      "product": {
        "name": "Linux"
      },
      "product_version": "patch: 0"
    }
  ],
  "enisaIdVendor": [
    {
      "id": "9d0cb6f2-0d28-3368-ace3-83bfcb246233",
      "vendor": {
        "name": "Linux"
      }
    }
  ]
}