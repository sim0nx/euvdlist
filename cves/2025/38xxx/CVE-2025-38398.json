{
  "id": "EUVD-2025-22605",
  "enisaUuid": "225cedf3-514a-314d-b408-edb64afed6f3",
  "description": "In the Linux kernel, the following vulnerability has been resolved:\n\nspi: spi-qpic-snand: reallocate BAM transactions\n\nUsing the mtd_nandbiterrs module for testing the driver occasionally\nresults in weird things like below.\n\n1. swiotlb mapping fails with the following message:\n\n  [   85.926216] qcom_snand 79b0000.spi: swiotlb buffer is full (sz: 4294967294 bytes), total 512 (slots), used 0 (slots)\n  [   85.932937] qcom_snand 79b0000.spi: failure in mapping desc\n  [   87.999314] qcom_snand 79b0000.spi: failure to write raw page\n  [   87.999352] mtd_nandbiterrs: error: write_oob failed (-110)\n\n  Rebooting the board after this causes a panic due to a NULL pointer\n  dereference.\n\n2. If the swiotlb mapping does not fail, rebooting the board may result\n   in a different panic due to a bad spinlock magic:\n\n  [  256.104459] BUG: spinlock bad magic on CPU#3, procd/2241\n  [  256.104488] Unable to handle kernel paging request at virtual address ffffffff0000049b\n  ...\n\nInvestigating the issue revealed that these symptoms are results of\nmemory corruption which is caused by out of bounds access within the\ndriver.\n\nThe driver uses a dynamically allocated structure for BAM transactions,\nwhich structure must have enough space for all possible variations of\ndifferent flash operations initiated by the driver. The required space\nheavily depends on the actual number of 'codewords' which is calculated\nfrom the pagesize of the actual NAND chip.\n\nAlthough the qcom_nandc_alloc() function allocates memory for the BAM\ntransactions during probe, but since the actual number of 'codewords'\nis not yet know the allocation is done for one 'codeword' only.\n\nBecause of this, whenever the driver does a flash operation, and the\nnumber of the required transactions exceeds the size of the allocated\narrays the driver accesses memory out of the allocated range.\n\nTo avoid this, change the code to free the initially allocated BAM\ntransactions memory, and allocate a new one once the actual number of\n'codewords' required for a given NAND chip is known.",
  "datePublished": "Jul 25, 2025, 12:53:42 PM",
  "dateUpdated": "Jul 28, 2025, 4:21:04 AM",
  "baseScore": 0.0,
  "references": [
    "https://git.kernel.org/stable/c/86fb36de1132b560f9305f0c78fa69f459fa0980",
    "https://git.kernel.org/stable/c/d85d0380292a7e618915069c3579ae23c7c80339"
  ],
  "aliases": [
    "CVE-2025-38398"
  ],
  "assigner": "Linux",
  "epss": 0.03,
  "enisaIdProduct": [
    {
      "id": "11ef7218-b31f-3dae-aa95-37d816bb8c93",
      "product": {
        "name": "Linux"
      },
      "product_version": "patch: 0"
    },
    {
      "id": "686ac1e5-fd50-37b4-a45f-9b2a1a9b473f",
      "product": {
        "name": "Linux"
      },
      "product_version": "7304d1909080ef0c9da703500a97f46c98393fcd <d85d0380292a7e618915069c3579ae23c7c80339"
    },
    {
      "id": "8f134979-1bae-34f0-988d-04b8df3a1ce0",
      "product": {
        "name": "Linux"
      },
      "product_version": "patch: 6.16"
    },
    {
      "id": "aa95daff-11f2-3a93-bc21-82b10407def6",
      "product": {
        "name": "Linux"
      },
      "product_version": "6.15"
    },
    {
      "id": "bc3b42c3-f41c-353e-b8ef-27887b5ce305",
      "product": {
        "name": "Linux"
      },
      "product_version": "7304d1909080ef0c9da703500a97f46c98393fcd <86fb36de1132b560f9305f0c78fa69f459fa0980"
    },
    {
      "id": "deed6b45-1449-3c78-ab70-faa5ae65b6ea",
      "product": {
        "name": "Linux"
      },
      "product_version": "patch: 6.15.6"
    },
    {
      "id": "ed7e0b09-0917-3a70-91e5-31e67077019e",
      "product": {
        "name": "Linux"
      },
      "product_version": "patch: 6.16-rc5"
    }
  ],
  "enisaIdVendor": [
    {
      "id": "4e2ad2b4-88c7-3d8d-bcb6-8dd60ba12dc8",
      "vendor": {
        "name": "Linux"
      }
    }
  ],
  "cve": "CVE-2025-38398"
}