{
  "id": "EUVD-2025-30337",
  "enisaUuid": "be60c26d-41be-3d79-bbd4-410d45c1b5e2",
  "description": "In the Linux kernel, the following vulnerability has been resolved:\n\nwifi: brcmfmac: fix use-after-free when rescheduling brcmf_btcoex_info work\n\nThe brcmf_btcoex_detach() only shuts down the btcoex timer, if the\nflag timer_on is false. However, the brcmf_btcoex_timerfunc(), which\nruns as timer handler, sets timer_on to false. This creates critical\nrace conditions:\n\n1.If brcmf_btcoex_detach() is called while brcmf_btcoex_timerfunc()\nis executing, it may observe timer_on as false and skip the call to\ntimer_shutdown_sync().\n\n2.The brcmf_btcoex_timerfunc() may then reschedule the brcmf_btcoex_info\nworker after the cancel_work_sync() has been executed, resulting in\nuse-after-free bugs.\n\nThe use-after-free bugs occur in two distinct scenarios, depending on\nthe timing of when the brcmf_btcoex_info struct is freed relative to\nthe execution of its worker thread.\n\nScenario 1: Freed before the worker is scheduled\n\nThe brcmf_btcoex_info is deallocated before the worker is scheduled.\nA race condition can occur when schedule_work(&bt_local->work) is\ncalled after the target memory has been freed. The sequence of events\nis detailed below:\n\nCPU0                           | CPU1\nbrcmf_btcoex_detach            | brcmf_btcoex_timerfunc\n                               |   bt_local->timer_on = false;\n  if (cfg->btcoex->timer_on)   |\n    ...                        |\n  cancel_work_sync();          |\n  ...                          |\n  kfree(cfg->btcoex); // FREE  |\n                               |   schedule_work(&bt_local->work); // USE\n\nScenario 2: Freed after the worker is scheduled\n\nThe brcmf_btcoex_info is freed after the worker has been scheduled\nbut before or during its execution. In this case, statements within\nthe brcmf_btcoex_handler() \u2014 such as the container_of macro and\nsubsequent dereferences of the brcmf_btcoex_info object will cause\na use-after-free access. The following timeline illustrates this\nscenario:\n\nCPU0                            | CPU1\nbrcmf_btcoex_detach             | brcmf_btcoex_timerfunc\n                                |   bt_local->timer_on = false;\n  if (cfg->btcoex->timer_on)    |\n    ...                         |\n  cancel_work_sync();           |\n  ...                           |   schedule_work(); // Reschedule\n                                |\n  kfree(cfg->btcoex); // FREE   |   brcmf_btcoex_handler() // Worker\n  /*                            |     btci = container_of(....); // USE\n   The kfree() above could      |     ...\n   also occur at any point      |     btci-> // USE\n   during the worker's execution|\n   */                           |\n\nTo resolve the race conditions, drop the conditional check and call\ntimer_shutdown_sync() directly. It can deactivate the timer reliably,\nregardless of its current state. Once stopped, the timer_on state is\nthen set to false.",
  "datePublished": "Sep 19, 2025, 3:26:33 PM",
  "dateUpdated": "Sep 29, 2025, 6:01:18 AM",
  "baseScore": 0.0,
  "references": [
    "https://git.kernel.org/stable/c/f1150153c4e5940fe49ab51136343c5b4fe49d63",
    "https://git.kernel.org/stable/c/3e789f8475f6c857c88de5c5bf4b24b11a477dd7",
    "https://git.kernel.org/stable/c/2f6fbc8e04ca1d1d5c560be694199f847229c625",
    "https://git.kernel.org/stable/c/9cb83d4be0b9b697eae93d321e0da999f9cdfcfc",
    "https://nvd.nist.gov/vuln/detail/CVE-2025-39863"
  ],
  "aliases": [
    "CVE-2025-39863"
  ],
  "assigner": "Linux",
  "epss": 0.02,
  "enisaIdProduct": [
    {
      "id": "0d129ec9-0bd0-3d77-a28b-82076862de0e",
      "product": {
        "name": "Linux"
      },
      "product_version": "patch: 0"
    },
    {
      "id": "0e30c2ac-d6c3-3b4d-92e5-01fd474a70b7",
      "product": {
        "name": "Linux"
      },
      "product_version": "patch: 6.17"
    },
    {
      "id": "238f0355-92e3-30c8-b913-6b47010f9ebe",
      "product": {
        "name": "Linux"
      },
      "product_version": "61730d4dfffc2cc9d3a49fad87633008105c18ba <f1150153c4e5940fe49ab51136343c5b4fe49d63"
    },
    {
      "id": "5492c1fa-06ca-3c81-96a8-584599b91b35",
      "product": {
        "name": "Linux"
      },
      "product_version": "patch: 6.12.46"
    },
    {
      "id": "54b86aa7-d81e-3623-a42c-740c0abf2e32",
      "product": {
        "name": "Linux"
      },
      "product_version": "61730d4dfffc2cc9d3a49fad87633008105c18ba <3e789f8475f6c857c88de5c5bf4b24b11a477dd7"
    },
    {
      "id": "567729a7-81cf-30b2-9ebf-2ba53147eef5",
      "product": {
        "name": "Linux"
      },
      "product_version": "61730d4dfffc2cc9d3a49fad87633008105c18ba <9cb83d4be0b9b697eae93d321e0da999f9cdfcfc"
    },
    {
      "id": "62b005e4-3b98-3131-a6be-169411c3da38",
      "product": {
        "name": "Linux"
      },
      "product_version": "61730d4dfffc2cc9d3a49fad87633008105c18ba <2f6fbc8e04ca1d1d5c560be694199f847229c625"
    },
    {
      "id": "a27647b0-4447-3add-9079-c24f77b8750d",
      "product": {
        "name": "Linux"
      },
      "product_version": "patch: 6.6.105"
    },
    {
      "id": "c497cb31-4aa8-3e5c-937a-45b6fc449089",
      "product": {
        "name": "Linux"
      },
      "product_version": "3.10"
    },
    {
      "id": "e2a1dc90-7706-3f54-8728-3c53a9e41a6d",
      "product": {
        "name": "Linux"
      },
      "product_version": "patch: 6.16.6"
    },
    {
      "id": "ef1aad40-e6cf-3f3e-90f2-e01937b32ca9",
      "product": {
        "name": "Linux"
      },
      "product_version": "patch: 6.17-rc5"
    }
  ],
  "enisaIdVendor": [
    {
      "id": "c373d60e-a0aa-32ad-9ad2-3a3aac0049fc",
      "vendor": {
        "name": "Linux"
      }
    }
  ]
}