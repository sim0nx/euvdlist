{
  "id": "EUVD-2025-19774",
  "enisaUuid": "da09abcf-75d9-3f5c-865b-af15a16a266e",
  "description": "In the Linux kernel, the following vulnerability has been resolved:\n\narm64/fpsimd: Discard stale CPU state when handling SME traps\n\nThe logic for handling SME traps manipulates saved FPSIMD/SVE/SME state\nincorrectly, and a race with preemption can result in a task having\nTIF_SME set and TIF_FOREIGN_FPSTATE clear even though the live CPU state\nis stale (e.g. with SME traps enabled). This can result in warnings from\ndo_sme_acc() where SME traps are not expected while TIF_SME is set:\n\n|        /* With TIF_SME userspace shouldn't generate any traps */\n|        if (test_and_set_thread_flag(TIF_SME))\n|                WARN_ON(1);\n\nThis is very similar to the SVE issue we fixed in commit:\n\n  751ecf6afd6568ad (\"arm64/sve: Discard stale CPU state when handling SVE traps\")\n\nThe race can occur when the SME trap handler is preempted before and\nafter manipulating the saved FPSIMD/SVE/SME state, starting and ending on\nthe same CPU, e.g.\n\n| void do_sme_acc(unsigned long esr, struct pt_regs *regs)\n| {\n|         // Trap on CPU 0 with TIF_SME clear, SME traps enabled\n|         // task->fpsimd_cpu is 0.\n|         // per_cpu_ptr(&fpsimd_last_state, 0) is task.\n|\n|         ...\n|\n|         // Preempted; migrated from CPU 0 to CPU 1.\n|         // TIF_FOREIGN_FPSTATE is set.\n|\n|         get_cpu_fpsimd_context();\n|\n|         /* With TIF_SME userspace shouldn't generate any traps */\n|         if (test_and_set_thread_flag(TIF_SME))\n|                 WARN_ON(1);\n|\n|         if (!test_thread_flag(TIF_FOREIGN_FPSTATE)) {\n|                 unsigned long vq_minus_one =\n|                         sve_vq_from_vl(task_get_sme_vl(current)) - 1;\n|                 sme_set_vq(vq_minus_one);\n|\n|                 fpsimd_bind_task_to_cpu();\n|         }\n|\n|         put_cpu_fpsimd_context();\n|\n|         // Preempted; migrated from CPU 1 to CPU 0.\n|         // task->fpsimd_cpu is still 0\n|         // If per_cpu_ptr(&fpsimd_last_state, 0) is still task then:\n|         // - Stale HW state is reused (with SME traps enabled)\n|         // - TIF_FOREIGN_FPSTATE is cleared\n|         // - A return to userspace skips HW state restore\n| }\n\nFix the case where the state is not live and TIF_FOREIGN_FPSTATE is set\nby calling fpsimd_flush_task_state() to detach from the saved CPU\nstate. This ensures that a subsequent context switch will not reuse the\nstale CPU state, and will instead set TIF_FOREIGN_FPSTATE, forcing the\nnew state to be reloaded from memory prior to a return to userspace.\n\nNote: this was originallly posted as [1].\n\n[ Rutland: rewrite commit message ]",
  "datePublished": "Jul 3, 2025, 8:36:09 AM",
  "dateUpdated": "Jul 28, 2025, 4:14:10 AM",
  "baseScore": 0.0,
  "references": [
    "https://git.kernel.org/stable/c/de89368de3894a8db27caeb8fd902ba1c49f696a",
    "https://git.kernel.org/stable/c/43be952e885476dafb74aa832c0847b2f4f650c6",
    "https://git.kernel.org/stable/c/6103f9ba51a59afb5a0f32299c837377c5a5a693",
    "https://git.kernel.org/stable/c/c4a4786d93e99517d6f10ed56b9ffba4ce88d3b3",
    "https://git.kernel.org/stable/c/d3eaab3c70905c5467e5c4ea403053d67505adeb"
  ],
  "aliases": [
    "CVE-2025-38170"
  ],
  "assigner": "Linux",
  "epss": 0.04,
  "enisaIdProduct": [
    {
      "id": "75c11024-dd4c-326a-98c8-da68c911aaa0",
      "product": {
        "name": "Linux"
      },
      "product_version": "patch: 6.16"
    },
    {
      "id": "76cba876-e60a-3de1-ac3e-b86296671013",
      "product": {
        "name": "Linux"
      },
      "product_version": "5.19"
    },
    {
      "id": "78d6eccb-c81e-3154-9834-efcb7e86b7d8",
      "product": {
        "name": "Linux"
      },
      "product_version": "8bd7f91c03d886f41d35f6108078d20be5a4a1bd <6103f9ba51a59afb5a0f32299c837377c5a5a693"
    },
    {
      "id": "8b1d73f5-d8d7-3ba4-bf2e-71bbeac50d4c",
      "product": {
        "name": "Linux"
      },
      "product_version": "8bd7f91c03d886f41d35f6108078d20be5a4a1bd <d3eaab3c70905c5467e5c4ea403053d67505adeb"
    },
    {
      "id": "927614f7-4ee5-389f-9347-a007098dd127",
      "product": {
        "name": "Linux"
      },
      "product_version": "patch: 6.12.34"
    },
    {
      "id": "96d3ec39-5f03-3cfb-a792-6ed8798c58b6",
      "product": {
        "name": "Linux"
      },
      "product_version": "patch: 6.6.94"
    },
    {
      "id": "a2bdca3a-1306-38ac-a798-700050864095",
      "product": {
        "name": "Linux"
      },
      "product_version": "8bd7f91c03d886f41d35f6108078d20be5a4a1bd <43be952e885476dafb74aa832c0847b2f4f650c6"
    },
    {
      "id": "b74179a5-a83d-3121-baa9-b6cc601ac381",
      "product": {
        "name": "Linux"
      },
      "product_version": "patch: 6.15.3"
    },
    {
      "id": "baa9fd19-b389-3f2a-9f8f-234fada0bcec",
      "product": {
        "name": "Linux"
      },
      "product_version": "8bd7f91c03d886f41d35f6108078d20be5a4a1bd <c4a4786d93e99517d6f10ed56b9ffba4ce88d3b3"
    },
    {
      "id": "cde4803b-7e07-3886-8558-ae75419c9709",
      "product": {
        "name": "Linux"
      },
      "product_version": "8bd7f91c03d886f41d35f6108078d20be5a4a1bd <de89368de3894a8db27caeb8fd902ba1c49f696a"
    },
    {
      "id": "ed23f71a-b9bb-3a74-bea8-dd825c619c38",
      "product": {
        "name": "Linux"
      },
      "product_version": "patch: 6.16-rc1"
    },
    {
      "id": "f42833c3-9dbb-3dd4-bbd7-863638b77c58",
      "product": {
        "name": "Linux"
      },
      "product_version": "patch: 0"
    },
    {
      "id": "f6099bf4-e738-3f7a-98dc-a65b91c939f7",
      "product": {
        "name": "Linux"
      },
      "product_version": "patch: 6.1.142"
    }
  ],
  "enisaIdVendor": [
    {
      "id": "b53ce34d-f58a-34e5-9cbb-7c3abb302fd3",
      "vendor": {
        "name": "Linux"
      }
    }
  ]
}