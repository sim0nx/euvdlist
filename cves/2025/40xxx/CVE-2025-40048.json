{
  "id": "EUVD-2025-36480",
  "enisaUuid": "eae0c6b9-06bb-3624-a62a-5c46da7f21e4",
  "description": "In the Linux kernel, the following vulnerability has been resolved:\n\nuio_hv_generic: Let userspace take care of interrupt mask\n\nRemove the logic to set interrupt mask by default in uio_hv_generic\ndriver as the interrupt mask value is supposed to be controlled\ncompletely by the user space. If the mask bit gets changed\nby the driver, concurrently with user mode operating on the ring,\nthe mask bit may be set when it is supposed to be clear, and the\nuser-mode driver will miss an interrupt which will cause a hang.\n\nFor eg- when the driver sets inbound ring buffer interrupt mask to 1,\nthe host does not interrupt the guest on the UIO VMBus channel.\nHowever, setting the mask does not prevent the host from putting a\nmessage in the inbound ring buffer.\u00a0So let\u2019s assume that happens,\nthe host puts a message into the ring buffer but does not interrupt.\n\nSubsequently, the user space code in the guest sets the inbound ring\nbuffer interrupt mask to 0, saying \u201cHey, I\u2019m ready for interrupts\u201d.\nUser space code then calls pread() to wait for an interrupt.\nThen one of two things happens:\n\n* The host never sends another message. So the pread() waits forever.\n* The host does send another message. But because there\u2019s already a\n  message in the ring buffer, it doesn\u2019t generate an interrupt.\n  This is the correct behavior, because the host should only send an\n  interrupt when the inbound ring buffer transitions from empty to\n  not-empty. Adding an additional message to a ring buffer that is not\n  empty is not supposed to generate an interrupt on the guest.\n  Since the guest is waiting in pread() and not removing messages from\n  the ring buffer, the pread() waits forever.\n\nThis could be easily reproduced in hv_fcopy_uio_daemon if we delay\nsetting interrupt mask to 0.\n\nSimilarly if hv_uio_channel_cb() sets the interrupt_mask to 1,\nthere\u2019s a race condition. Once user space empties the inbound ring\nbuffer, but before user space sets interrupt_mask to 0, the host could\nput another message in the ring buffer but it wouldn\u2019t interrupt.\nThen the next pread() would hang.\n\nFix these by removing all instances where interrupt_mask is changed,\nwhile keeping the one in set_event() unchanged to enable userspace\ncontrol the interrupt mask by writing 0/1 to /dev/uioX.",
  "datePublished": "Oct 28, 2025, 11:48:25 AM",
  "dateUpdated": "Oct 28, 2025, 11:48:25 AM",
  "baseScore": 0.0,
  "references": [
    "https://git.kernel.org/stable/c/a44f61f878f32071d6378e8dd7c2d47f9490c8f7",
    "https://git.kernel.org/stable/c/01ce972e6f9974a7c76943bcb7e93746917db83a",
    "https://git.kernel.org/stable/c/2af39ab5e6dc46b835a52e80a22d0cad430985e3",
    "https://git.kernel.org/stable/c/37bd91f22794dc05436130d6983302cb90ecfe7e",
    "https://git.kernel.org/stable/c/e29587c07537929684faa365027f4b0d87521e1b",
    "https://git.kernel.org/stable/c/b15b7d2a1b09ef5428a8db260251897405a19496",
    "https://nvd.nist.gov/vuln/detail/CVE-2025-40048"
  ],
  "aliases": [
    "CVE-2025-40048"
  ],
  "assigner": "Linux",
  "epss": 0.0,
  "enisaIdProduct": [
    {
      "id": "00b3826c-4709-34ce-8b7b-b54e7a07f1e6",
      "product": {
        "name": "Linux"
      },
      "product_version": "95096f2fbd10186d3e78a328b327afc71428f65f <37bd91f22794dc05436130d6983302cb90ecfe7e"
    },
    {
      "id": "0784b455-ecb9-354d-96cb-d11eceaf769c",
      "product": {
        "name": "Linux"
      },
      "product_version": "95096f2fbd10186d3e78a328b327afc71428f65f <2af39ab5e6dc46b835a52e80a22d0cad430985e3"
    },
    {
      "id": "346be288-dbe5-37f4-9523-ba9e108199ac",
      "product": {
        "name": "Linux"
      },
      "product_version": "95096f2fbd10186d3e78a328b327afc71428f65f <e29587c07537929684faa365027f4b0d87521e1b"
    },
    {
      "id": "69c7a185-ee6f-3e37-a309-a61496e5bceb",
      "product": {
        "name": "Linux"
      },
      "product_version": "patch: 5.15.195"
    },
    {
      "id": "81b7e7f7-c0d8-3db3-ba15-88ee0b267bb5",
      "product": {
        "name": "Linux"
      },
      "product_version": "95096f2fbd10186d3e78a328b327afc71428f65f <b15b7d2a1b09ef5428a8db260251897405a19496"
    },
    {
      "id": "843159ed-65a0-339a-a4f2-1afcb910f88f",
      "product": {
        "name": "Linux"
      },
      "product_version": "patch: 6.12.53"
    },
    {
      "id": "85dbfb3c-fbfb-35fd-af6d-82bc67726815",
      "product": {
        "name": "Linux"
      },
      "product_version": "95096f2fbd10186d3e78a328b327afc71428f65f <01ce972e6f9974a7c76943bcb7e93746917db83a"
    },
    {
      "id": "885d2c5d-c225-3c12-a712-fecd531ffa5b",
      "product": {
        "name": "Linux"
      },
      "product_version": "patch: 6.18-rc1"
    },
    {
      "id": "8ed85205-c3ff-31a1-87f5-5ed58cf66f7b",
      "product": {
        "name": "Linux"
      },
      "product_version": "patch: 0"
    },
    {
      "id": "9697ae1b-1e84-327a-8346-dc816f66edad",
      "product": {
        "name": "Linux"
      },
      "product_version": "95096f2fbd10186d3e78a328b327afc71428f65f <a44f61f878f32071d6378e8dd7c2d47f9490c8f7"
    },
    {
      "id": "a7e1e52f-fbe7-3dac-bc4d-055d37c2b1e4",
      "product": {
        "name": "Linux"
      },
      "product_version": "patch: 6.17.3"
    },
    {
      "id": "adae2129-03c3-37ef-a782-c60353930353",
      "product": {
        "name": "Linux"
      },
      "product_version": "patch: 6.6.112"
    },
    {
      "id": "bb436b84-a51d-3aca-b4db-e46f5f6ecba9",
      "product": {
        "name": "Linux"
      },
      "product_version": "4.10"
    },
    {
      "id": "cabb5d31-1b55-32c3-8406-52bcd4ba761a",
      "product": {
        "name": "Linux"
      },
      "product_version": "patch: 6.1.156"
    }
  ],
  "enisaIdVendor": [
    {
      "id": "688c6cfb-b0ef-37e1-9f51-44b1850dea61",
      "vendor": {
        "name": "Linux"
      }
    }
  ],
  "cve": "CVE-2025-40048"
}