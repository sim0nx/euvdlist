{
  "id": "EUVD-2025-34584",
  "enisaUuid": "4e31ffb9-2c6b-369c-86bb-fe30efc5528e",
  "description": "In the Linux kernel, the following vulnerability has been resolved:\n\ncan: etas_es58x: populate ndo_change_mtu() to prevent buffer overflow\n\nSending an PF_PACKET allows to bypass the CAN framework logic and to\ndirectly reach the xmit() function of a CAN driver. The only check\nwhich is performed by the PF_PACKET framework is to make sure that\nskb->len fits the interface's MTU.\n\nUnfortunately, because the etas_es58x driver does not populate its\nnet_device_ops->ndo_change_mtu(), it is possible for an attacker to\nconfigure an invalid MTU by doing, for example:\n\n  $ ip link set can0 mtu 9999\n\nAfter doing so, the attacker could open a PF_PACKET socket using the\nETH_P_CANXL protocol:\n\n\tsocket(PF_PACKET, SOCK_RAW, htons(ETH_P_CANXL));\n\nto inject a malicious CAN XL frames. For example:\n\n\tstruct canxl_frame frame = {\n\t\t.flags = 0xff,\n\t\t.len = 2048,\n\t};\n\nThe CAN drivers' xmit() function are calling can_dev_dropped_skb() to\ncheck that the skb is valid, unfortunately under above conditions, the\nmalicious packet is able to go through can_dev_dropped_skb() checks:\n\n  1. the skb->protocol is set to ETH_P_CANXL which is valid (the\n     function does not check the actual device capabilities).\n\n  2. the length is a valid CAN XL length.\n\nAnd so, es58x_start_xmit() receives a CAN XL frame which it is not\nable to correctly handle and will thus misinterpret it as a CAN(FD)\nframe.\n\nThis can result in a buffer overflow. For example, using the es581.4\nvariant, the frame will be dispatched to es581_4_tx_can_msg(), go\nthrough the last check at the beginning of this function:\n\n\tif (can_is_canfd_skb(skb))\n\t\treturn -EMSGSIZE;\n\nand reach this line:\n\n\tmemcpy(tx_can_msg->data, cf->data, cf->len);\n\nHere, cf->len corresponds to the flags field of the CAN XL frame. In\nour previous example, we set canxl_frame->flags to 0xff. Because the\nmaximum expected length is 8, a buffer overflow of 247 bytes occurs!\n\nPopulate net_device_ops->ndo_change_mtu() to ensure that the\ninterface's MTU can not be set to anything bigger than CAN_MTU or\nCANFD_MTU (depending on the device capabilities). By fixing the root\ncause, this prevents the buffer overflow.",
  "datePublished": "Oct 15, 2025, 9:30:17 AM",
  "dateUpdated": "Oct 15, 2025, 9:30:17 AM",
  "baseScore": 0.0,
  "references": [
    "https://git.kernel.org/stable/c/72de0facc50afdb101fb7197d880407f1abfc77f",
    "https://git.kernel.org/stable/c/c4e582e686c4d683c87f2b4a316385b3d81d370f",
    "https://git.kernel.org/stable/c/cbc1de71766f326a44bb798aeae4a7ef4a081cc9",
    "https://git.kernel.org/stable/c/b26cccd87dcddc47b450a40f3b1ac3fe346efcff",
    "https://git.kernel.org/stable/c/e587af2c89ecc6382c518febea52fa9ba81e47c0",
    "https://git.kernel.org/stable/c/38c0abad45b190a30d8284a37264d2127a6ec303",
    "https://nvd.nist.gov/vuln/detail/CVE-2025-39988"
  ],
  "aliases": [
    "CVE-2025-39988"
  ],
  "assigner": "Linux",
  "epss": 0.03,
  "enisaIdProduct": [
    {
      "id": "0c120a1e-b3e3-3c2a-8ce3-1c4af4f4752d",
      "product": {
        "name": "Linux"
      },
      "product_version": "8537257874e949a59c834cecfd5a063e11b64b0b <cbc1de71766f326a44bb798aeae4a7ef4a081cc9"
    },
    {
      "id": "0ebffd6e-82a9-3e46-b060-d6151d3a2df3",
      "product": {
        "name": "Linux"
      },
      "product_version": "8537257874e949a59c834cecfd5a063e11b64b0b <c4e582e686c4d683c87f2b4a316385b3d81d370f"
    },
    {
      "id": "514dfa94-2224-3058-ae58-51f753e53d1a",
      "product": {
        "name": "Linux"
      },
      "product_version": "patch: 0"
    },
    {
      "id": "58ff38c0-e098-39f4-adaf-36b8ff42e68a",
      "product": {
        "name": "Linux"
      },
      "product_version": "patch: 6.12.50"
    },
    {
      "id": "697877ec-1ee9-3494-967b-684491a7d79d",
      "product": {
        "name": "Linux"
      },
      "product_version": "5.13"
    },
    {
      "id": "69cea41c-0eb1-301e-a01e-8abd9075ea55",
      "product": {
        "name": "Linux"
      },
      "product_version": "8537257874e949a59c834cecfd5a063e11b64b0b <72de0facc50afdb101fb7197d880407f1abfc77f"
    },
    {
      "id": "8b3486c7-7581-3995-bc7d-c5561e7c9bbd",
      "product": {
        "name": "Linux"
      },
      "product_version": "patch: 6.17"
    },
    {
      "id": "90e2e72d-6150-323c-adea-22e8e084e1f3",
      "product": {
        "name": "Linux"
      },
      "product_version": "8537257874e949a59c834cecfd5a063e11b64b0b <b26cccd87dcddc47b450a40f3b1ac3fe346efcff"
    },
    {
      "id": "99a978f0-1c80-3b39-b176-451cbcfd2aef",
      "product": {
        "name": "Linux"
      },
      "product_version": "8537257874e949a59c834cecfd5a063e11b64b0b <38c0abad45b190a30d8284a37264d2127a6ec303"
    },
    {
      "id": "9eeddfaa-5a2d-3939-9ccd-ed8be7fdda23",
      "product": {
        "name": "Linux"
      },
      "product_version": "patch: 6.6.109"
    },
    {
      "id": "c3e66ab1-7dd7-357d-a41e-6b3a5d0f00b4",
      "product": {
        "name": "Linux"
      },
      "product_version": "patch: 6.1.155"
    },
    {
      "id": "d3fc52c7-965a-3d8a-ac5d-d911fef02d75",
      "product": {
        "name": "Linux"
      },
      "product_version": "patch: 5.15.194"
    },
    {
      "id": "fdf1faad-e9fe-37e4-88c6-fc5bdf21b696",
      "product": {
        "name": "Linux"
      },
      "product_version": "patch: 6.16.10"
    },
    {
      "id": "fe4c564c-fa51-38e3-ac61-118d6b217dac",
      "product": {
        "name": "Linux"
      },
      "product_version": "8537257874e949a59c834cecfd5a063e11b64b0b <e587af2c89ecc6382c518febea52fa9ba81e47c0"
    }
  ],
  "enisaIdVendor": [
    {
      "id": "41898646-e389-32d7-a118-18ca25794caa",
      "vendor": {
        "name": "Linux"
      }
    }
  ]
}