{
  "id": "EUVD-2023-59696",
  "description": "In the Linux kernel, the following vulnerability has been resolved:\n\nbpf: Fix pointer-leak due to insufficient speculative store bypass mitigation\n\nTo mitigate Spectre v4, 2039f26f3aca (\"bpf: Fix leakage due to\ninsufficient speculative store bypass mitigation\") inserts lfence\ninstructions after 1) initializing a stack slot and 2) spilling a\npointer to the stack.\n\nHowever, this does not cover cases where a stack slot is first\ninitialized with a pointer (subject to sanitization) but then\noverwritten with a scalar (not subject to sanitization because\nthe slot was already initialized). In this case, the second write\nmay be subject to speculative store bypass (SSB) creating a\nspeculative pointer-as-scalar type confusion. This allows the\nprogram to subsequently leak the numerical pointer value using,\nfor example, a branch-based cache side channel.\n\nTo fix this, also sanitize scalars if they write a stack slot\nthat previously contained a pointer. Assuming that pointer-spills\nare only generated by LLVM on register-pressure, the performance\nimpact on most real-world BPF programs should be small.\n\nThe following unprivileged BPF bytecode drafts a minimal exploit\nand the mitigation:\n\n  [...]\n  // r6 = 0 or 1 (skalar, unknown user input)\n  // r7 = accessible ptr for side channel\n  // r10 = frame pointer (fp), to be leaked\n  //\n  r9 = r10 # fp alias to encourage ssb\n  *(u64 *)(r9 - 8) = r10 // fp[-8] = ptr, to be leaked\n  // lfence added here because of pointer spill to stack.\n  //\n  // Ommitted: Dummy bpf_ringbuf_output() here to train alias predictor\n  // for no r9-r10 dependency.\n  //\n  *(u64 *)(r10 - 8) = r6 // fp[-8] = scalar, overwrites ptr\n  // 2039f26f3aca: no lfence added because stack slot was not STACK_INVALID,\n  // store may be subject to SSB\n  //\n  // fix: also add an lfence when the slot contained a ptr\n  //\n  r8 = *(u64 *)(r9 - 8)\n  // r8 = architecturally a scalar, speculatively a ptr\n  //\n  // leak ptr using branch-based cache side channel:\n  r8 &= 1 // choose bit to leak\n  if r8 == 0 goto SLOW // no mispredict\n  // architecturally dead code if input r6 is 0,\n  // only executes speculatively iff ptr bit is 1\n  r8 = *(u64 *)(r7 + 0) # encode bit in cache (0: slow, 1: fast)\nSLOW:\n  [...]\n\nAfter running this, the program can time the access to *(r7 + 0) to\ndetermine whether the chosen pointer bit was 0 or 1. Repeat this 64\ntimes to recover the whole address on amd64.\n\nIn summary, sanitization can only be skipped if one scalar is\noverwritten with another scalar. Scalar-confusion due to speculative\nstore bypass can not lead to invalid accesses because the pointer\nbounds deducted during verification are enforced using branchless\nlogic. See 979d63d50c0c (\"bpf: prevent out of bounds speculation on\npointer arithmetic\") for details.\n\nDo not make the mitigation depend on !env->allow_{uninit_stack,ptr_leaks}\nbecause speculative leaks are likely unexpected if these were enabled.\nFor example, leaking the address to a protected log file may be acceptable\nwhile disabling the mitigation might unintentionally leak the address\ninto the cached-state of a map that is accessible to unprivileged\nprocesses.",
  "datePublished": "Mar 27, 2025, 4:43:49 PM",
  "dateUpdated": "Mar 27, 2025, 4:43:49 PM",
  "baseScore": 0.0,
  "references": [
    "https://git.kernel.org/stable/c/aae109414a57ab4164218f36e2e4a17f027fcaaa",
    "https://git.kernel.org/stable/c/81b3374944d201872cfcf82730a7860f8e7c31dd",
    "https://git.kernel.org/stable/c/da75dec7c6617bddad418159ffebcb133f008262",
    "https://git.kernel.org/stable/c/01bdcc73dbe7be3ad4d4ee9a59b71e42f461a528",
    "https://git.kernel.org/stable/c/b0c89ef025562161242a7c19b213bd6b272e93df",
    "https://git.kernel.org/stable/c/e4f4db47794c9f474b184ee1418f42e6a07412b6"
  ],
  "aliases": [
    "CVE-2023-53024"
  ],
  "assigner": "Linux",
  "epss": 0.04,
  "enisaIdProduct": [
    {
      "id": "2bd77133-d4db-3ce5-99b6-08d7f632c185",
      "product": {
        "name": "Linux"
      },
      "product_version": "0e9280654aa482088ee6ef3deadef331f5ac5fb0 <da75dec7c6617bddad418159ffebcb133f008262"
    },
    {
      "id": "44d7bada-9119-3f49-a059-7793e8d87541",
      "product": {
        "name": "Linux"
      },
      "product_version": "2039f26f3aca5b0e419b98f65dd36481337b86ee <01bdcc73dbe7be3ad4d4ee9a59b71e42f461a528"
    },
    {
      "id": "5bbb1712-b6d9-317b-98a5-7b8034edcb24",
      "product": {
        "name": "Linux"
      },
      "product_version": "5.14"
    },
    {
      "id": "a5410db9-3432-3973-bb37-84e6ef509f7e",
      "product": {
        "name": "Linux"
      },
      "product_version": "2039f26f3aca5b0e419b98f65dd36481337b86ee <b0c89ef025562161242a7c19b213bd6b272e93df"
    },
    {
      "id": "d178137b-90f1-323d-9da6-5e8114d6b13f",
      "product": {
        "name": "Linux"
      },
      "product_version": "f5893af2704eb763eb982f01d573f5b19f06b623 <81b3374944d201872cfcf82730a7860f8e7c31dd"
    },
    {
      "id": "d1ce378c-6dbf-34d5-972c-8e7bcc092583",
      "product": {
        "name": "Linux"
      },
      "product_version": "872968502114d68c21419cf7eb5ab97717e7b803 <aae109414a57ab4164218f36e2e4a17f027fcaaa"
    },
    {
      "id": "f1a35787-6afc-367d-aed5-68dde5ea1084",
      "product": {
        "name": "Linux"
      },
      "product_version": "2039f26f3aca5b0e419b98f65dd36481337b86ee <e4f4db47794c9f474b184ee1418f42e6a07412b6"
    }
  ],
  "enisaIdVendor": [
    {
      "id": "43218bd6-c83b-3806-9d99-7e10f7d842eb",
      "vendor": {
        "name": "Linux"
      }
    }
  ],
  "cve": "CVE-2023-53024"
}
