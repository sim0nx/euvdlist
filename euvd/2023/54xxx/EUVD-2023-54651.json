{
  "id": "EUVD-2023-54651",
  "enisaUuid": "a11064de-4d1b-3a63-b947-731d80c01f11",
  "description": "Issue summary: The POLY1305 MAC (message authentication code) implementation\ncontains a bug that might corrupt the internal state of applications on the\nWindows 64 platform when running on newer X86_64 processors supporting the\nAVX512-IFMA instructions.\n\nImpact summary: If in an application that uses the OpenSSL library an attacker\ncan influence whether the POLY1305 MAC algorithm is used, the application\nstate might be corrupted with various application dependent consequences.\n\nThe POLY1305 MAC (message authentication code) implementation in OpenSSL does\nnot save the contents of non-volatile XMM registers on Windows 64 platform\nwhen calculating the MAC of data larger than 64 bytes. Before returning to\nthe caller all the XMM registers are set to zero rather than restoring their\nprevious content. The vulnerable code is used only on newer x86_64 processors\nsupporting the AVX512-IFMA instructions.\n\nThe consequences of this kind of internal application state corruption can\nbe various - from no consequences, if the calling application does not\ndepend on the contents of non-volatile XMM registers at all, to the worst\nconsequences, where the attacker could get complete control of the application\nprocess. However given the contents of the registers are just zeroized so\nthe attacker cannot put arbitrary values inside, the most likely consequence,\nif any, would be an incorrect result of some application dependent\ncalculations or a crash leading to a denial of service.\n\nThe POLY1305 MAC algorithm is most frequently used as part of the\nCHACHA20-POLY1305 AEAD (authenticated encryption with associated data)\nalgorithm. The most common usage of this AEAD cipher is with TLS protocol\nversions 1.2 and 1.3 and a malicious client can influence whether this AEAD\ncipher is used by the server. This implies that server applications using\nOpenSSL can be potentially impacted. However we are currently not aware of\nany concrete application that would be affected by this issue therefore we\nconsider this a Low severity security issue.\n\nAs a workaround the AVX512-IFMA instructions support can be disabled at\nruntime by setting the environment variable OPENSSL_ia32cap:\n\n   OPENSSL_ia32cap=:~0x200000\n\nThe FIPS provider is not affected by this issue.",
  "datePublished": "Sep 8, 2023, 11:01:53 AM",
  "dateUpdated": "Aug 27, 2025, 8:42:52 PM",
  "baseScore": 7.8,
  "baseScoreVersion": "3.1",
  "baseScoreVector": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H",
  "references": [
    "https://www.openssl.org/news/secadv/20230908.txt",
    "https://git.openssl.org/gitweb/?p=openssl.git;a=commitdiff;h=4bfac4471f53c4f74c8d81020beb938f92d84ca5",
    "https://git.openssl.org/gitweb/?p=openssl.git;a=commitdiff;h=6754de4a121ec7f261b16723180df6592cbb4508",
    "https://git.openssl.org/gitweb/?p=openssl.git;a=commitdiff;h=a632d534c73eeb3e3db8c7540d811194ef7c79ff",
    "https://security.netapp.com/advisory/ntap-20230921-0001/"
  ],
  "aliases": [
    "CVE-2023-4807",
    "GSD-2023-4807"
  ],
  "assigner": "openssl",
  "epss": 0.67,
  "enisaIdProduct": [
    {
      "id": "598c6846-3a53-3d0d-a77d-6ec4aa554134",
      "product": {
        "name": "OpenSSL"
      },
      "product_version": "1.1.1 <1.1.1w"
    },
    {
      "id": "afcabd52-6f3a-3989-813b-40aa875e8bb5",
      "product": {
        "name": "OpenSSL"
      },
      "product_version": "3.0.0 <3.0.11"
    },
    {
      "id": "dc246dfb-e32c-3c0a-bdf4-99b2f90e7aea",
      "product": {
        "name": "OpenSSL"
      },
      "product_version": "3.1.0 <3.1.3"
    }
  ],
  "enisaIdVendor": [
    {
      "id": "83e26f70-2209-35b4-9b89-7f991af1ba56",
      "vendor": {
        "name": "OpenSSL"
      }
    }
  ]
}