{
  "id": "EUVD-2022-55291",
  "enisaUuid": "0e56b090-7104-30d9-a568-18f907d09cd8",
  "description": "In the Linux kernel, the following vulnerability has been resolved:\n\nmm/gup: fix FOLL_FORCE COW security issue and remove FOLL_COW\n\nEver since the Dirty COW (CVE-2016-5195) security issue happened, we know\nthat FOLL_FORCE can be possibly dangerous, especially if there are races\nthat can be exploited by user space.\n\nRight now, it would be sufficient to have some code that sets a PTE of a\nR/O-mapped shared page dirty, in order for it to erroneously become\nwritable by FOLL_FORCE.  The implications of setting a write-protected PTE\ndirty might not be immediately obvious to everyone.\n\nAnd in fact ever since commit 9ae0f87d009c (\"mm/shmem: unconditionally set\npte dirty in mfill_atomic_install_pte\"), we can use UFFDIO_CONTINUE to map\na shmem page R/O while marking the pte dirty.  This can be used by\nunprivileged user space to modify tmpfs/shmem file content even if the\nuser does not have write permissions to the file, and to bypass memfd\nwrite sealing -- Dirty COW restricted to tmpfs/shmem (CVE-2022-2590).\n\nTo fix such security issues for good, the insight is that we really only\nneed that fancy retry logic (FOLL_COW) for COW mappings that are not\nwritable (!VM_WRITE).  And in a COW mapping, we really only broke COW if\nwe have an exclusive anonymous page mapped.  If we have something else\nmapped, or the mapped anonymous page might be shared (!PageAnonExclusive),\nwe have to trigger a write fault to break COW.  If we don't find an\nexclusive anonymous page when we retry, we have to trigger COW breaking\nonce again because something intervened.\n\nLet's move away from this mandatory-retry + dirty handling and rely on our\nPageAnonExclusive() flag for making a similar decision, to use the same\nCOW logic as in other kernel parts here as well.  In case we stumble over\na PTE in a COW mapping that does not map an exclusive anonymous page, COW\nwas not properly broken and we have to trigger a fake write-fault to break\nCOW.\n\nJust like we do in can_change_pte_writable() added via commit 64fe24a3e05e\n(\"mm/mprotect: try avoiding write faults for exclusive anonymous pages\nwhen changing protection\") and commit 76aefad628aa (\"mm/mprotect: fix\nsoft-dirty check in can_change_pte_writable()\"), take care of softdirty\nand uffd-wp manually.\n\nFor example, a write() via /proc/self/mem to a uffd-wp-protected range has\nto fail instead of silently granting write access and bypassing the\nuserspace fault handler.  Note that FOLL_FORCE is not only used for debug\naccess, but also triggered by applications without debug intentions, for\nexample, when pinning pages via RDMA.\n\nThis fixes CVE-2022-2590. Note that only x86_64 and aarch64 are\naffected, because only those support CONFIG_HAVE_ARCH_USERFAULTFD_MINOR.\n\nFortunately, FOLL_COW is no longer required to handle FOLL_FORCE. So\nlet's just get rid of it.\n\nThanks to Nadav Amit for pointing out that the pte_dirty() check in\nFOLL_FORCE code is problematic and might be exploitable.\n\nNote 1: We don't check for the PTE being dirty because it doesn't matter\n\tfor making a \"was COWed\" decision anymore, and whoever modifies the\n\tpage has to set the page dirty either way.\n\nNote 2: Kernels before extended uffd-wp support and before\n\tPageAnonExclusive (< 5.19) can simply revert the problematic\n\tcommit instead and be safe regarding UFFDIO_CONTINUE. A backport to\n\tv5.19 requires minor adjustments due to lack of\n\tvma_soft_dirty_enabled().",
  "datePublished": "Jun 18, 2025, 11:01:18 AM",
  "dateUpdated": "Jun 18, 2025, 11:01:18 AM",
  "baseScore": 0.0,
  "references": [
    "https://git.kernel.org/stable/c/9def52eb10baab3b700858003d462fcf17d62873",
    "https://git.kernel.org/stable/c/5535be3099717646781ce1540cf725965d680e7b"
  ],
  "aliases": [
    "CVE-2022-50014"
  ],
  "assigner": "Linux",
  "epss": 0.03,
  "enisaIdProduct": [
    {
      "id": "3a612055-d115-308e-8e44-4cfa7e2001da",
      "product": {
        "name": "Linux"
      },
      "product_version": "5.16"
    },
    {
      "id": "47b086dd-98a8-39f5-aaf7-38f03f5a4d71",
      "product": {
        "name": "Linux"
      },
      "product_version": "patch: 6.0"
    },
    {
      "id": "7ef3fc3d-cba2-37a1-badd-db52debc09de",
      "product": {
        "name": "Linux"
      },
      "product_version": "9ae0f87d009ca6c4aab2882641ddfc319727e3db <5535be3099717646781ce1540cf725965d680e7b"
    },
    {
      "id": "87002e0a-8d67-37bc-9453-b2479dbdd78b",
      "product": {
        "name": "Linux"
      },
      "product_version": "patch: 5.19.6"
    },
    {
      "id": "c59ab4ee-bef2-3824-887a-8ed28a6bb04a",
      "product": {
        "name": "Linux"
      },
      "product_version": "9ae0f87d009ca6c4aab2882641ddfc319727e3db <9def52eb10baab3b700858003d462fcf17d62873"
    },
    {
      "id": "e1d96e59-6ab5-3609-bb07-de46f937c71b",
      "product": {
        "name": "Linux"
      },
      "product_version": "patch: 0"
    }
  ],
  "enisaIdVendor": [
    {
      "id": "0d939604-2a4c-34ce-9827-3719e43a3fe4",
      "vendor": {
        "name": "Linux"
      }
    }
  ],
  "cve": "CVE-2022-50014"
}