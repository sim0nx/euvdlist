{
  "id": "EUVD-2024-23932",
  "enisaUuid": "f1bf96f9-c263-3ca7-9302-63d35dc615fc",
  "description": "In the Linux kernel, the following vulnerability has been resolved:\n\narm64: entry: fix ARM64_WORKAROUND_SPECULATIVE_UNPRIV_LOAD\n\nCurrently the ARM64_WORKAROUND_SPECULATIVE_UNPRIV_LOAD workaround isn't\nquite right, as it is supposed to be applied after the last explicit\nmemory access, but is immediately followed by an LDR.\n\nThe ARM64_WORKAROUND_SPECULATIVE_UNPRIV_LOAD workaround is used to\nhandle Cortex-A520 erratum 2966298 and Cortex-A510 erratum 3117295,\nwhich are described in:\n\n* https://developer.arm.com/documentation/SDEN2444153/0600/?lang=en\n* https://developer.arm.com/documentation/SDEN1873361/1600/?lang=en\n\nIn both cases the workaround is described as:\n\n| If pagetable isolation is disabled, the context switch logic in the\n| kernel can be updated to execute the following sequence on affected\n| cores before exiting to EL0, and after all explicit memory accesses:\n|\n| 1. A non-shareable TLBI to any context and/or address, including\n|    unused contexts or addresses, such as a `TLBI VALE1 Xzr`.\n|\n| 2. A DSB NSH to guarantee completion of the TLBI.\n\nThe important part being that the TLBI+DSB must be placed \"after all\nexplicit memory accesses\".\n\nUnfortunately, as-implemented, the TLBI+DSB is immediately followed by\nan LDR, as we have:\n\n| alternative_if ARM64_WORKAROUND_SPECULATIVE_UNPRIV_LOAD\n| \ttlbi\tvale1, xzr\n| \tdsb\tnsh\n| alternative_else_nop_endif\n| alternative_if_not ARM64_UNMAP_KERNEL_AT_EL0\n| \tldr\tlr, [sp, #S_LR]\n| \tadd\tsp, sp, #PT_REGS_SIZE\t\t// restore sp\n| \teret\n| alternative_else_nop_endif\n|\n| [ ... KPTI exception return path ... ]\n\nThis patch fixes this by reworking the logic to place the TLBI+DSB\nimmediately before the ERET, after all explicit memory accesses.\n\nThe ERET is currently in a separate alternative block, and alternatives\ncannot be nested. To account for this, the alternative block for\nARM64_UNMAP_KERNEL_AT_EL0 is replaced with a single alternative branch\nto skip the KPTI logic, with the new shape of the logic being:\n\n| alternative_insn \"b .L_skip_tramp_exit_\\@\", nop, ARM64_UNMAP_KERNEL_AT_EL0\n| \t[ ... KPTI exception return path ... ]\n| .L_skip_tramp_exit_\\@:\n|\n| \tldr\tlr, [sp, #S_LR]\n| \tadd\tsp, sp, #PT_REGS_SIZE\t\t// restore sp\n|\n| alternative_if ARM64_WORKAROUND_SPECULATIVE_UNPRIV_LOAD\n| \ttlbi\tvale1, xzr\n| \tdsb\tnsh\n| alternative_else_nop_endif\n| \teret\n\nThe new structure means that the workaround is only applied when KPTI is\nnot in use; this is fine as noted in the documented implications of the\nerratum:\n\n| Pagetable isolation between EL0 and higher level ELs prevents the\n| issue from occurring.\n\n... and as per the workaround description quoted above, the workaround\nis only necessary \"If pagetable isolation is disabled\".",
  "datePublished": "Apr 2, 2024, 6:43:31 AM",
  "dateUpdated": "Oct 1, 2025, 6:01:07 PM",
  "baseScore": 5.5,
  "baseScoreVersion": "3.1",
  "baseScoreVector": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H",
  "references": [
    "https://git.kernel.org/stable/c/58eb5c07f41704464b9acc09ab0707b6769db6c0",
    "https://git.kernel.org/stable/c/baa0aaac16432019651e0d60c41cd34a0c3c3477",
    "https://git.kernel.org/stable/c/832dd634bd1b4e3bbe9f10b9c9ba5db6f6f2b97f",
    "https://nvd.nist.gov/vuln/detail/CVE-2024-26670"
  ],
  "aliases": [
    "CVE-2024-26670",
    "GSD-2024-26670"
  ],
  "assigner": "Linux",
  "epss": 0.01,
  "enisaIdProduct": [
    {
      "id": "0084dfb7-8b3b-3be8-896c-a7b42ca6b643",
      "product": {
        "name": "Linux"
      },
      "product_version": "patch: 6.7.3"
    },
    {
      "id": "11e1305d-afdf-3f2f-ae42-2810adc51fd9",
      "product": {
        "name": "Linux"
      },
      "product_version": "patch: 6.6.15"
    },
    {
      "id": "1a265db1-1e58-32b1-bb3b-49bed0c72047",
      "product": {
        "name": "Linux"
      },
      "product_version": "patch: 6.8"
    },
    {
      "id": "3d1a675c-58c4-39a6-aed9-5f0f4a54608b",
      "product": {
        "name": "Linux"
      },
      "product_version": "32b0a4ffcaea44a00a61e40c0d1bcc50362aee25"
    },
    {
      "id": "3d734ffb-cba8-30be-a25f-5558a8150a04",
      "product": {
        "name": "Linux"
      },
      "product_version": "6.6"
    },
    {
      "id": "6e467f53-c065-3c1d-8112-2278ebb41189",
      "product": {
        "name": "Linux"
      },
      "product_version": "patch: 0"
    },
    {
      "id": "8a2ff742-7ae5-38b2-bebb-3fab0324d7e8",
      "product": {
        "name": "Linux"
      }
    },
    {
      "id": "bcd34204-87bd-303d-a306-e9b95a972c60",
      "product": {
        "name": "Linux"
      },
      "product_version": "471470bc7052d28ce125901877dd10e4c048e513 <832dd634bd1b4e3bbe9f10b9c9ba5db6f6f2b97f"
    },
    {
      "id": "ca0b1721-f679-3b91-abfd-2b40773a169e",
      "product": {
        "name": "Linux"
      },
      "product_version": "471470bc7052d28ce125901877dd10e4c048e513 <58eb5c07f41704464b9acc09ab0707b6769db6c0"
    },
    {
      "id": "e01e6109-0f6a-3c61-be5e-a404c0c983e9",
      "product": {
        "name": "Linux"
      },
      "product_version": "471470bc7052d28ce125901877dd10e4c048e513 <baa0aaac16432019651e0d60c41cd34a0c3c3477"
    },
    {
      "id": "f11a695b-ef51-3c0b-87f4-322d0647f7e0",
      "product": {
        "name": "Linux"
      },
      "product_version": "6e3ae2927b432a3b7c8374f14dbc1bd9ebe4372c"
    }
  ],
  "enisaIdVendor": [
    {
      "id": "8a2ff742-7ae5-38b2-bebb-3fab0324d7e8",
      "vendor": {
        "name": "Linux"
      }
    }
  ],
  "cve": "CVE-2024-26670"
}