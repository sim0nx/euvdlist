{
  "id": "EUVD-2024-0313",
  "description": "Trillium is a composable toolkit for building internet applications with async rust. In `trillium-http` prior to 0.3.12 and `trillium-client` prior to 0.5.4, insufficient validation of outbound header values may lead to request splitting or response splitting attacks in scenarios where attackers have sufficient control over headers. This only affects use cases where attackers have control of request headers, and can insert \"\\r\\n\" sequences. Specifically, if untrusted and unvalidated input is inserted into header names or values.\n\nOutbound `trillium_http::HeaderValue` and `trillium_http::HeaderName` can be constructed infallibly and were not checked for illegal bytes when sending requests from the client or responses from the server. Thus, if an attacker has sufficient control over header values (or names) in a request or response that they could inject `\\r\\n` sequences, they could get the client and server out of sync, and then pivot to gain control over other parts of requests or responses. (i.e. exfiltrating data from other requests, SSRF, etc.)\n\nIn `trillium-http` versions 0.3.12 and later, if a header name is invalid in server response headers, the specific header and any associated values are omitted from network transmission. Additionally, if a header value is invalid in server response headers, the individual header value is omitted from network transmission. Other headers values with the same header name will still be sent. In `trillium-client` versions 0.5.4 and later, if any header name or header value is invalid in the client request headers, awaiting the client Conn returns an `Error::MalformedHeader` prior to any network access. As a workaround, Trillium services and client applications should sanitize or validate untrusted input that is included in header values and header names. Carriage return, newline, and null characters are not allowed.",
  "datePublished": "Jan 24, 2024, 7:38:41 PM",
  "dateUpdated": "Aug 1, 2024, 11:06:25 PM",
  "baseScore": 6.8,
  "baseScoreVersion": "3.1",
  "baseScoreVector": "CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:U/C:H/I:H/A:N",
  "references": [
    "https://github.com/trillium-rs/trillium/security/advisories/GHSA-9f9p-cp3c-72jf",
    "https://nvd.nist.gov/vuln/detail/CVE-2024-23644",
    "https://github.com/trillium-rs/trillium/commit/16a42b3f8378a3fa4e61ece3e3e37e6a530df51d",
    "https://github.com/trillium-rs/trillium/commit/8d468f85e27b8d0943d6f43ce9f8c7397141a999",
    "https://github.com/trillium-rs/trillium",
    "https://rustsec.org/advisories/RUSTSEC-2024-0008.html",
    "https://rustsec.org/advisories/RUSTSEC-2024-0009.html"
  ],
  "aliases": [
    "CVE-2024-23644",
    "GHSA-9f9p-cp3c-72jf"
  ],
  "assigner": "GitHub_M",
  "epss": 0.37,
  "enisaIdProduct": [
    {
      "id": "0c52e1b7-c3de-324c-a998-e9487e80d3aa",
      "product": {
        "name": "trillium"
      }
    },
    {
      "id": "68f794f9-e4f0-3433-a460-05a0558def4a",
      "product": {
        "name": "trillium"
      },
      "product_version": "< 0.3.12"
    },
    {
      "id": "bc1ece0b-819a-3c3b-902d-9be980c3a4d6",
      "product": {
        "name": "trillium"
      },
      "product_version": "< 0.5.4"
    }
  ],
  "enisaIdVendor": [
    {
      "id": "ebfd2227-767e-3391-bc3b-93465754b79d",
      "vendor": {
        "name": "trillium-rs"
      }
    }
  ],
  "cve": "CVE-2024-23644"
}