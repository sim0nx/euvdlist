{
  "id": "EUVD-2025-32873",
  "enisaUuid": "ec543905-7c0b-3b43-b43f-c9a6168e8f13",
  "description": "In the Linux kernel, the following vulnerability has been resolved:\n\nnet: phy: transfer phy_config_inband() locking responsibility to phylink\n\nProblem description\n===================\n\nLockdep reports a possible circular locking dependency (AB/BA) between\n&pl->state_mutex and &phy->lock, as follows.\n\nphylink_resolve() // acquires &pl->state_mutex\n-> phylink_major_config()\n   -> phy_config_inband() // acquires &pl->phydev->lock\n\nwhereas all the other call sites where &pl->state_mutex and\n&pl->phydev->lock have the locking scheme reversed. Everywhere else,\n&pl->phydev->lock is acquired at the top level, and &pl->state_mutex at\nthe lower level. A clear example is phylink_bringup_phy().\n\nThe outlier is the newly introduced phy_config_inband() and the existing\nlock order is the correct one. To understand why it cannot be the other\nway around, it is sufficient to consider phylink_phy_change(), phylink's\ncallback from the PHY device's phy->phy_link_change() virtual method,\ninvoked by the PHY state machine.\n\nphy_link_up() and phy_link_down(), the (indirect) callers of\nphylink_phy_change(), are called with &phydev->lock acquired.\nThen phylink_phy_change() acquires its own &pl->state_mutex, to\nserialize changes made to its pl->phy_state and pl->link_config.\nSo all other instances of &pl->state_mutex and &phydev->lock must be\nconsistent with this order.\n\nProblem impact\n==============\n\nI think the kernel runs a serious deadlock risk if an existing\nphylink_resolve() thread, which results in a phy_config_inband() call,\nis concurrent with a phy_link_up() or phy_link_down() call, which will\ndeadlock on &pl->state_mutex in phylink_phy_change(). Practically\nspeaking, the impact may be limited by the slow speed of the medium\nauto-negotiation protocol, which makes it unlikely for the current state\nto still be unresolved when a new one is detected, but I think the\nproblem is there. Nonetheless, the problem was discovered using lockdep.\n\nProposed solution\n=================\n\nPractically speaking, the phy_config_inband() requirement of having\nphydev->lock acquired must transfer to the caller (phylink is the only\ncaller). There, it must bubble up until immediately before\n&pl->state_mutex is acquired, for the cases where that takes place.\n\nSolution details, considerations, notes\n=======================================\n\nThis is the phy_config_inband() call graph:\n\n                          sfp_upstream_ops :: connect_phy()\n                          |\n                          v\n                          phylink_sfp_connect_phy()\n                          |\n                          v\n                          phylink_sfp_config_phy()\n                          |\n                          |   sfp_upstream_ops :: module_insert()\n                          |   |\n                          |   v\n                          |   phylink_sfp_module_insert()\n                          |   |\n                          |   |   sfp_upstream_ops :: module_start()\n                          |   |   |\n                          |   |   v\n                          |   |   phylink_sfp_module_start()\n                          |   |   |\n                          |   v   v\n                          |   phylink_sfp_config_optical()\n phylink_start()          |   |\n   |   phylink_resume()   v   v\n   |   |  phylink_sfp_set_config()\n   |   |  |\n   v   v  v\n phylink_mac_initial_config()\n   |   phylink_resolve()\n   |   |  phylink_ethtool_ksettings_set()\n   v   v  v\n   phylink_major_config()\n            |\n            v\n    phy_config_inband()\n\nphylink_major_config() caller #1, phylink_mac_initial_config(), does not\nacquire &pl->state_mutex nor do its callers. It must acquire\n&pl->phydev->lock prior to calling phylink_major_config().\n\nphylink_major_config() caller #2, phylink_resolve() acquires\n&pl->state_mutex, thus also needs to acquire &pl->phydev->lock.\n\nphylink_major_config() caller #3, phylink_ethtool_ksettings_set(), is\ncompletely uninteresting, because it only call\n---truncated---",
  "datePublished": "Oct 1, 2025, 7:44:37 AM",
  "dateUpdated": "Oct 1, 2025, 7:44:37 AM",
  "baseScore": 0.0,
  "references": [
    "https://nvd.nist.gov/vuln/detail/CVE-2025-39915",
    "https://git.kernel.org/stable/c/052ac41c379c8b87629808be612a482b2d0ae283",
    "https://git.kernel.org/stable/c/e2a10daba84968f6b5777d150985fd7d6abc9c84"
  ],
  "aliases": [
    "CVE-2025-39915",
    "GHSA-m8cc-c87r-9qr2"
  ],
  "assigner": "Linux",
  "epss": 0.02,
  "enisaIdProduct": [
    {
      "id": "364b8385-747e-3d5c-a4ad-c02121eac11a",
      "product": {
        "name": "Linux"
      },
      "product_version": "patch: 6.16.8"
    },
    {
      "id": "6e857ca7-0354-35fb-a245-9155f8812121",
      "product": {
        "name": "Linux"
      },
      "product_version": "5fd0f1a02e750e2db4038dee60edea669ce5aab1 <e2a10daba84968f6b5777d150985fd7d6abc9c84"
    },
    {
      "id": "752fdb6a-4712-3491-bf6f-23ab5ed590a6",
      "product": {
        "name": "Linux"
      },
      "product_version": "5fd0f1a02e750e2db4038dee60edea669ce5aab1 <052ac41c379c8b87629808be612a482b2d0ae283"
    },
    {
      "id": "bd4c8ca6-e5f0-3caf-8431-fdc30a868f48",
      "product": {
        "name": "Linux"
      },
      "product_version": "patch: 0"
    },
    {
      "id": "d3dd4836-5ca6-3bef-aad7-675d8a080eb0",
      "product": {
        "name": "Linux"
      },
      "product_version": "6.14"
    },
    {
      "id": "f54f0674-91ed-3b04-8c3e-bc677499fe44",
      "product": {
        "name": "Linux"
      },
      "product_version": "patch: 6.17"
    }
  ],
  "enisaIdVendor": [
    {
      "id": "ec0fd426-bb88-302c-9954-114f46496992",
      "vendor": {
        "name": "Linux"
      }
    }
  ]
}