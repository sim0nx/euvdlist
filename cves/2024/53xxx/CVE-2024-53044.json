{
  "id": "EUVD-2024-50460",
  "enisaUuid": "075c162a-789b-3d03-94f7-1020293d5c5d",
  "description": "In the Linux kernel, the following vulnerability has been resolved:\n\nnet/sched: sch_api: fix xa_insert() error path in tcf_block_get_ext()\n\nThis command:\n\n$ tc qdisc replace dev eth0 ingress_block 1 egress_block 1 clsact\nError: block dev insert failed: -EBUSY.\n\nfails because user space requests the same block index to be set for\nboth ingress and egress.\n\n[ side note, I don't think it even failed prior to commit 913b47d3424e\n  (\"net/sched: Introduce tc block netdev tracking infra\"), because this\n  is a command from an old set of notes of mine which used to work, but\n  alas, I did not scientifically bisect this ]\n\nThe problem is not that it fails, but rather, that the second time\naround, it fails differently (and irrecoverably):\n\n$ tc qdisc replace dev eth0 ingress_block 1 egress_block 1 clsact\nError: dsa_core: Flow block cb is busy.\n\n[ another note: the extack is added by me for illustration purposes.\n  the context of the problem is that clsact_init() obtains the same\n  &q->ingress_block pointer as &q->egress_block, and since we call\n  tcf_block_get_ext() on both of them, \"dev\" will be added to the\n  block->ports xarray twice, thus failing the operation: once through\n  the ingress block pointer, and once again through the egress block\n  pointer. the problem itself is that when xa_insert() fails, we have\n  emitted a FLOW_BLOCK_BIND command through ndo_setup_tc(), but the\n  offload never sees a corresponding FLOW_BLOCK_UNBIND. ]\n\nEven correcting the bad user input, we still cannot recover:\n\n$ tc qdisc replace dev swp3 ingress_block 1 egress_block 2 clsact\nError: dsa_core: Flow block cb is busy.\n\nBasically the only way to recover is to reboot the system, or unbind and\nrebind the net device driver.\n\nTo fix the bug, we need to fill the correct error teardown path which\nwas missed during code movement, and call tcf_block_offload_unbind()\nwhen xa_insert() fails.\n\n[ last note, fundamentally I blame the label naming convention in\n  tcf_block_get_ext() for the bug. The labels should be named after what\n  they do, not after the error path that jumps to them. This way, it is\n  obviously wrong that two labels pointing to the same code mean\n  something is wrong, and checking the code correctness at the goto site\n  is also easier ]",
  "datePublished": "Nov 19, 2024, 5:19:32 PM",
  "dateUpdated": "Oct 1, 2025, 8:17:19 PM",
  "baseScore": 5.5,
  "baseScoreVersion": "3.1",
  "baseScoreVector": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H",
  "references": [
    "https://git.kernel.org/stable/c/8966eb69a143b1c032365fe84f2815f3c46f2590",
    "https://git.kernel.org/stable/c/a13e690191eafc154b3f60afe9ce35aa9b9128b4"
  ],
  "aliases": [
    "CVE-2024-53044"
  ],
  "assigner": "Linux",
  "epss": 0.04,
  "enisaIdProduct": [
    {
      "id": "145de75c-cf7f-3821-a033-7af8ae8ff977",
      "product": {
        "name": "Linux"
      },
      "product_version": "patch: 6.12"
    },
    {
      "id": "2b85bbd4-340e-38d7-88fc-73cb17221436",
      "product": {
        "name": "Linux"
      },
      "product_version": "94e2557d086ad831027c54bc9c2130d337c72814 <8966eb69a143b1c032365fe84f2815f3c46f2590"
    },
    {
      "id": "4a5cf61b-9f76-3ce8-ad3e-0de22b42dafa",
      "product": {
        "name": "Linux"
      },
      "product_version": "6.8"
    },
    {
      "id": "5ee4a401-927f-3ab1-aa43-f3ba3956f67b",
      "product": {
        "name": "Linux"
      },
      "product_version": "patch: 0"
    },
    {
      "id": "7c2163b1-0b60-3429-8b9b-a5fc84b51461",
      "product": {
        "name": "Linux"
      },
      "product_version": "94e2557d086ad831027c54bc9c2130d337c72814 <a13e690191eafc154b3f60afe9ce35aa9b9128b4"
    },
    {
      "id": "ddfdc142-7709-3639-8847-53cd3dffed3f",
      "product": {
        "name": "Linux"
      },
      "product_version": "patch: 6.11.7"
    }
  ],
  "enisaIdVendor": [
    {
      "id": "32d0179a-9f79-39dc-98d2-9554813b64eb",
      "vendor": {
        "name": "Linux"
      }
    }
  ],
  "cve": "CVE-2024-53044"
}