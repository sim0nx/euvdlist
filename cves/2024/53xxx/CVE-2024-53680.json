{
  "id": "EUVD-2024-52025",
  "description": "In the Linux kernel, the following vulnerability has been resolved:\n\nipvs: fix UB due to uninitialized stack access in ip_vs_protocol_init()\n\nUnder certain kernel configurations when building with Clang/LLVM, the\ncompiler does not generate a return or jump as the terminator\ninstruction for ip_vs_protocol_init(), triggering the following objtool\nwarning during build time:\n\n  vmlinux.o: warning: objtool: ip_vs_protocol_init() falls through to next function __initstub__kmod_ip_vs_rr__935_123_ip_vs_rr_init6()\n\nAt runtime, this either causes an oops when trying to load the ipvs\nmodule or a boot-time panic if ipvs is built-in. This same issue has\nbeen reported by the Intel kernel test robot previously.\n\nDigging deeper into both LLVM and the kernel code reveals this to be a\nundefined behavior problem. ip_vs_protocol_init() uses a on-stack buffer\nof 64 chars to store the registered protocol names and leaves it\nuninitialized after definition. The function calls strnlen() when\nconcatenating protocol names into the buffer. With CONFIG_FORTIFY_SOURCE\nstrnlen() performs an extra step to check whether the last byte of the\ninput char buffer is a null character (commit 3009f891bb9f (\"fortify:\nAllow strlen() and strnlen() to pass compile-time known lengths\")).\nThis, together with possibly other configurations, cause the following\nIR to be generated:\n\n  define hidden i32 @ip_vs_protocol_init() local_unnamed_addr #5 section \".init.text\" align 16 !kcfi_type !29 {\n    %1 = alloca [64 x i8], align 16\n    ...\n\n  14:                                               ; preds = %11\n    %15 = getelementptr inbounds i8, ptr %1, i64 63\n    %16 = load i8, ptr %15, align 1\n    %17 = tail call i1 @llvm.is.constant.i8(i8 %16)\n    %18 = icmp eq i8 %16, 0\n    %19 = select i1 %17, i1 %18, i1 false\n    br i1 %19, label %20, label %23\n\n  20:                                               ; preds = %14\n    %21 = call i64 @strlen(ptr noundef nonnull dereferenceable(1) %1) #23\n    ...\n\n  23:                                               ; preds = %14, %11, %20\n    %24 = call i64 @strnlen(ptr noundef nonnull dereferenceable(1) %1, i64 noundef 64) #24\n    ...\n  }\n\nThe above code calculates the address of the last char in the buffer\n(value %15) and then loads from it (value %16). Because the buffer is\nnever initialized, the LLVM GVN pass marks value %16 as undefined:\n\n  %13 = getelementptr inbounds i8, ptr %1, i64 63\n  br i1 undef, label %14, label %17\n\nThis gives later passes (SCCP, in particular) more DCE opportunities by\npropagating the undef value further, and eventually removes everything\nafter the load on the uninitialized stack location:\n\n  define hidden i32 @ip_vs_protocol_init() local_unnamed_addr #0 section \".init.text\" align 16 !kcfi_type !11 {\n    %1 = alloca [64 x i8], align 16\n    ...\n\n  12:                                               ; preds = %11\n    %13 = getelementptr inbounds i8, ptr %1, i64 63\n    unreachable\n  }\n\nIn this way, the generated native code will just fall through to the\nnext function, as LLVM does not generate any code for the unreachable IR\ninstruction and leaves the function without a terminator.\n\nZero the on-stack buffer to avoid this possible UB.",
  "datePublished": "Jan 11, 2025, 12:25:21 PM",
  "dateUpdated": "Jan 20, 2025, 6:21:55 AM",
  "baseScore": 0.0,
  "references": [
    "https://git.kernel.org/stable/c/31d1ddc1ce8e8d3f101a679243abb42a313ee88a",
    "https://git.kernel.org/stable/c/0b2cbed82b7c6504a8a0fbd181f92dd56b432c12",
    "https://git.kernel.org/stable/c/d6e1776f51c95827142f1d7064118e255e2deec1",
    "https://git.kernel.org/stable/c/664d0feab92495b6a27edc3d1119e232c0fe8b2b",
    "https://git.kernel.org/stable/c/124834133b32f9386bb2d8581d9ab92f65e951e4",
    "https://git.kernel.org/stable/c/48130002e64fd191b7d18efeb4d253fcc23e4688",
    "https://git.kernel.org/stable/c/146b6f1112eb30a19776d6c323c994e9d67790db"
  ],
  "aliases": [
    "CVE-2024-53680"
  ],
  "assigner": "Linux",
  "epss": 0.07,
  "enisaIdProduct": [
    {
      "id": "0d2d145d-68b5-3c01-af0b-137e54f30298",
      "product": {
        "name": "Linux"
      },
      "product_version": "patch: 5.10.231"
    },
    {
      "id": "1137bf19-d3c6-39b2-8bc1-c5a712b77d8f",
      "product": {
        "name": "Linux"
      },
      "product_version": "1da177e4c3f41524e886b7f1b8a0c1fc7321cac2 <d6e1776f51c95827142f1d7064118e255e2deec1"
    },
    {
      "id": "2aad56c4-d30c-3526-a8d0-2e71da995aec",
      "product": {
        "name": "Linux"
      },
      "product_version": "1da177e4c3f41524e886b7f1b8a0c1fc7321cac2 <146b6f1112eb30a19776d6c323c994e9d67790db"
    },
    {
      "id": "38af61d7-0d97-3667-9d35-c721fa1a3979",
      "product": {
        "name": "Linux"
      },
      "product_version": "1da177e4c3f41524e886b7f1b8a0c1fc7321cac2 <31d1ddc1ce8e8d3f101a679243abb42a313ee88a"
    },
    {
      "id": "53117afa-00c9-3d17-ab78-bfa58e7df70e",
      "product": {
        "name": "Linux"
      },
      "product_version": "patch: 0"
    },
    {
      "id": "57f64b6e-5af7-39d5-bb86-1bf288829a0c",
      "product": {
        "name": "Linux"
      },
      "product_version": "2.6.12"
    },
    {
      "id": "5e239a4c-6b71-31d2-aac3-d33cc5dc5e7b",
      "product": {
        "name": "Linux"
      },
      "product_version": "patch: 6.13"
    },
    {
      "id": "601c79e6-7fb3-3295-a25a-899405814109",
      "product": {
        "name": "Linux"
      },
      "product_version": "patch: 6.1.120"
    },
    {
      "id": "720f5a97-505d-3d8c-b90f-2e80b3dba534",
      "product": {
        "name": "Linux"
      },
      "product_version": "1da177e4c3f41524e886b7f1b8a0c1fc7321cac2 <48130002e64fd191b7d18efeb4d253fcc23e4688"
    },
    {
      "id": "744a96d3-e348-3d2f-b21a-321f6414efa7",
      "product": {
        "name": "Linux"
      },
      "product_version": "1da177e4c3f41524e886b7f1b8a0c1fc7321cac2 <0b2cbed82b7c6504a8a0fbd181f92dd56b432c12"
    },
    {
      "id": "81ee0fdb-ae3d-3215-909e-222fb68a88d4",
      "product": {
        "name": "Linux"
      },
      "product_version": "1da177e4c3f41524e886b7f1b8a0c1fc7321cac2 <124834133b32f9386bb2d8581d9ab92f65e951e4"
    },
    {
      "id": "8e247d24-bc8e-30b8-acbe-0fe5a11c0f3e",
      "product": {
        "name": "Linux"
      },
      "product_version": "patch: 5.15.174"
    },
    {
      "id": "8f1fe81a-8f02-3ec3-9a2f-beda695d08a6",
      "product": {
        "name": "Linux"
      },
      "product_version": "patch: 6.12.5"
    },
    {
      "id": "b8ef1df9-3462-3016-99d4-87ce9ce1e33c",
      "product": {
        "name": "Linux"
      },
      "product_version": "1da177e4c3f41524e886b7f1b8a0c1fc7321cac2 <664d0feab92495b6a27edc3d1119e232c0fe8b2b"
    },
    {
      "id": "da005163-559d-377c-a40d-0c2bc2de1c53",
      "product": {
        "name": "Linux"
      },
      "product_version": "patch: 5.4.287"
    },
    {
      "id": "ea23be7b-9e0a-3a64-a603-329fe8a5d9d4",
      "product": {
        "name": "Linux"
      },
      "product_version": "patch: 6.6.66"
    }
  ],
  "enisaIdVendor": [
    {
      "id": "f031ed62-93be-3299-a14b-b0a6ee7cf16d",
      "vendor": {
        "name": "Linux"
      }
    }
  ],
  "cve": "CVE-2024-53680"
}
