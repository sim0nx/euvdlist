{
  "id": "EUVD-2023-2270",
  "enisaUuid": "0f0abcec-0a2f-3a4e-b135-3ddf3630993f",
  "description": "OpenPGP.js is a JavaScript implementation of the OpenPGP protocol. In affected versions OpenPGP Cleartext Signed Messages are cryptographically signed messages where the signed text is readable without special tools. These messages typically contain a \"Hash: ...\" header declaring the hash algorithm used to compute the signature digest. OpenPGP.js up to v5.9.0 ignored any data preceding the \"Hash: ...\" texts when verifying the signature. As a result, malicious parties could add arbitrary text to a third-party Cleartext Signed Message, to lead the victim to believe that the arbitrary text was signed. A user or application is vulnerable to said attack vector if it verifies the CleartextMessage by only checking the returned `verified` property, discarding the associated `data` information, and instead _visually trusting_ the contents of the original message. Since `verificationResult.data` would always contain the actual signed data, users and apps that check this information are not vulnerable. Similarly, given a CleartextMessage object, retrieving the data using `getText()` or the `text` field returns only the contents that are considered when verifying the signature. Finally, re-armoring a CleartextMessage object (using `armor()` will also result in a \"sanitised\" version, with the extraneous text being removed. This issue has been addressed in version 5.10.1 (current stable version) which will reject messages when calling `openpgp.readCleartextMessage()` and in version 4.10.11 (legacy version) which will will reject messages when calling `openpgp.cleartext.readArmored()`. Users are advised to upgrade. Users unable to upgrade should check the contents of `verificationResult.data` to see what data was actually signed, rather than visually trusting the contents of the armored message.",
  "datePublished": "Aug 29, 2023, 4:46:47 PM",
  "dateUpdated": "Sep 30, 2024, 5:43:47 PM",
  "baseScore": 4.3,
  "baseScoreVersion": "3.1",
  "baseScoreVector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N",
  "references": [
    "https://github.com/openpgpjs/openpgpjs/security/advisories/GHSA-ch3c-v47x-4pgp",
    "https://nvd.nist.gov/vuln/detail/CVE-2023-41037",
    "https://github.com/openpgpjs/openpgpjs/commit/6b43e02a254853f5ff508ebd1b07541f78b7c566",
    "https://github.com/openpgpjs/openpgpjs",
    "https://github.com/openpgpjs/openpgpjs/releases/tag/v4.10.11",
    "https://github.com/openpgpjs/openpgpjs/releases/tag/v5.10.1"
  ],
  "aliases": [
    "CVE-2023-41037",
    "GHSA-ch3c-v47x-4pgp"
  ],
  "assigner": "GitHub_M",
  "epss": 0.08,
  "enisaIdProduct": [
    {
      "id": "7a3eb55d-5f74-3873-81e8-93802a5b5ba5",
      "product": {
        "name": "openpgpjs"
      },
      "product_version": "5.0.0, < 5.10.1"
    },
    {
      "id": "9743be0b-1d8a-3991-9470-528755909ac6",
      "product": {
        "name": "openpgpjs"
      },
      "product_version": "< 4.10.11"
    }
  ],
  "enisaIdVendor": [
    {
      "id": "569f9a25-ac60-3e2a-b9fe-f79dfdca4bd1",
      "vendor": {
        "name": "openpgpjs"
      }
    }
  ]
}