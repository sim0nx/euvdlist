{
  "id": "EUVD-2024-50474",
  "enisaUuid": "bdb5ba86-3046-3c54-8fe3-741db3570419",
  "description": "In the Linux kernel, the following vulnerability has been resolved:\n\nnet: stmmac: TSO: Fix unbalanced DMA map/unmap for non-paged SKB data\n\nIn case the non-paged data of a SKB carries protocol header and protocol\npayload to be transmitted on a certain platform that the DMA AXI address\nwidth is configured to 40-bit/48-bit, or the size of the non-paged data\nis bigger than TSO_MAX_BUFF_SIZE on a certain platform that the DMA AXI\naddress width is configured to 32-bit, then this SKB requires at least\ntwo DMA transmit descriptors to serve it.\n\nFor example, three descriptors are allocated to split one DMA buffer\nmapped from one piece of non-paged data:\n    dma_desc[N + 0],\n    dma_desc[N + 1],\n    dma_desc[N + 2].\nThen three elements of tx_q->tx_skbuff_dma[] will be allocated to hold\nextra information to be reused in stmmac_tx_clean():\n    tx_q->tx_skbuff_dma[N + 0],\n    tx_q->tx_skbuff_dma[N + 1],\n    tx_q->tx_skbuff_dma[N + 2].\nNow we focus on tx_q->tx_skbuff_dma[entry].buf, which is the DMA buffer\naddress returned by DMA mapping call. stmmac_tx_clean() will try to\nunmap the DMA buffer _ONLY_IF_ tx_q->tx_skbuff_dma[entry].buf\nis a valid buffer address.\n\nThe expected behavior that saves DMA buffer address of this non-paged\ndata to tx_q->tx_skbuff_dma[entry].buf is:\n    tx_q->tx_skbuff_dma[N + 0].buf = NULL;\n    tx_q->tx_skbuff_dma[N + 1].buf = NULL;\n    tx_q->tx_skbuff_dma[N + 2].buf = dma_map_single();\nUnfortunately, the current code misbehaves like this:\n    tx_q->tx_skbuff_dma[N + 0].buf = dma_map_single();\n    tx_q->tx_skbuff_dma[N + 1].buf = NULL;\n    tx_q->tx_skbuff_dma[N + 2].buf = NULL;\n\nOn the stmmac_tx_clean() side, when dma_desc[N + 0] is closed by the\nDMA engine, tx_q->tx_skbuff_dma[N + 0].buf is a valid buffer address\nobviously, then the DMA buffer will be unmapped immediately.\nThere may be a rare case that the DMA engine does not finish the\npending dma_desc[N + 1], dma_desc[N + 2] yet. Now things will go\nhorribly wrong, DMA is going to access a unmapped/unreferenced memory\nregion, corrupted data will be transmited or iommu fault will be\ntriggered :(\n\nIn contrast, the for-loop that maps SKB fragments behaves perfectly\nas expected, and that is how the driver should do for both non-paged\ndata and paged frags actually.\n\nThis patch corrects DMA map/unmap sequences by fixing the array index\nfor tx_q->tx_skbuff_dma[entry].buf when assigning DMA buffer address.\n\nTested and verified on DWXGMAC CORE 3.20a",
  "datePublished": "Nov 19, 2024, 5:19:40 PM",
  "dateUpdated": "Oct 1, 2025, 8:17:17 PM",
  "baseScore": 5.5,
  "baseScoreVersion": "3.1",
  "baseScoreVector": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H",
  "references": [
    "https://git.kernel.org/stable/c/ece593fc9c00741b682869d3f3dc584d37b7c9df",
    "https://git.kernel.org/stable/c/a3ff23f7c3f0e13f718900803e090fd3997d6bc9",
    "https://git.kernel.org/stable/c/07c9c26e37542486e34d767505e842f48f29c3f6",
    "https://git.kernel.org/stable/c/58d23d835eb498336716cca55b5714191a309286",
    "https://git.kernel.org/stable/c/66600fac7a984dea4ae095411f644770b2561ede"
  ],
  "aliases": [
    "CVE-2024-53058"
  ],
  "assigner": "Linux",
  "epss": 0.05,
  "enisaIdProduct": [
    {
      "id": "24a863be-5a8c-3757-84ac-54f1add5ac1b",
      "product": {
        "name": "Linux"
      },
      "product_version": "patch: 6.1.116"
    },
    {
      "id": "25dcec96-0c61-3fc3-b26f-98f013cf8a4e",
      "product": {
        "name": "Linux"
      },
      "product_version": "patch: 5.15.171"
    },
    {
      "id": "39b8ece3-26be-3b41-b662-3e8db7ad9eb5",
      "product": {
        "name": "Linux"
      },
      "product_version": "patch: 6.6.60"
    },
    {
      "id": "81cde7d3-2761-35b8-acc4-212ff2daf687",
      "product": {
        "name": "Linux"
      },
      "product_version": "patch: 0"
    },
    {
      "id": "9d4e0c72-1fd8-3103-baf1-c1682c2cee4a",
      "product": {
        "name": "Linux"
      },
      "product_version": "f748be531d7012c456b97f66091d86b3675c5fef <ece593fc9c00741b682869d3f3dc584d37b7c9df"
    },
    {
      "id": "9f92a7d6-0f91-3d16-afc0-f49f60649728",
      "product": {
        "name": "Linux"
      },
      "product_version": "patch: 6.12"
    },
    {
      "id": "ab89000d-f53d-3aa2-b443-76676ad47412",
      "product": {
        "name": "Linux"
      },
      "product_version": "f748be531d7012c456b97f66091d86b3675c5fef <07c9c26e37542486e34d767505e842f48f29c3f6"
    },
    {
      "id": "b237e501-eb3a-329d-a71c-805389d3188e",
      "product": {
        "name": "Linux"
      },
      "product_version": "patch: 6.11.7"
    },
    {
      "id": "c4d519bf-be58-36c5-af33-c36da242d654",
      "product": {
        "name": "Linux"
      },
      "product_version": "f748be531d7012c456b97f66091d86b3675c5fef <66600fac7a984dea4ae095411f644770b2561ede"
    },
    {
      "id": "ce378843-b842-34db-8ab6-e745c8c26dae",
      "product": {
        "name": "Linux"
      },
      "product_version": "4.7"
    },
    {
      "id": "e4e107dc-f0fb-3dc0-9ab8-3b8b000df771",
      "product": {
        "name": "Linux"
      },
      "product_version": "f748be531d7012c456b97f66091d86b3675c5fef <a3ff23f7c3f0e13f718900803e090fd3997d6bc9"
    },
    {
      "id": "fc7275a4-335d-36d3-97aa-49b5f97a2e51",
      "product": {
        "name": "Linux"
      },
      "product_version": "f748be531d7012c456b97f66091d86b3675c5fef <58d23d835eb498336716cca55b5714191a309286"
    }
  ],
  "enisaIdVendor": [
    {
      "id": "65b8d971-4206-3b8b-af73-63ebf24b85ae",
      "vendor": {
        "name": "Linux"
      }
    }
  ]
}