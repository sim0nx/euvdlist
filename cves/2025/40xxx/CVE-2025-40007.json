{
  "id": "EUVD-2025-35073",
  "enisaUuid": "7167ee4b-4c39-3564-b063-0ffcb08f1034",
  "description": "In the Linux kernel, the following vulnerability has been resolved:\n\nnetfs: fix reference leak\n\nCommit 20d72b00ca81 (\"netfs: Fix the request's work item to not\nrequire a ref\") modified netfs_alloc_request() to initialize the\nreference counter to 2 instead of 1.  The rationale was that the\nrequet's \"work\" would release the second reference after completion\n(via netfs_{read,write}_collection_worker()).  That works most of the\ntime if all goes well.\n\nHowever, it leaks this additional reference if the request is released\nbefore the I/O operation has been submitted: the error code path only\ndecrements the reference counter once and the work item will never be\nqueued because there will never be a completion.\n\nThis has caused outages of our whole server cluster today because\ntasks were blocked in netfs_wait_for_outstanding_io(), leading to\ndeadlocks in Ceph (another bug that I will address soon in another\npatch).  This was caused by a netfs_pgpriv2_begin_copy_to_cache() call\nwhich failed in fscache_begin_write_operation().  The leaked\nnetfs_io_request was never completed, leaving `netfs_inode.io_count`\nwith a positive value forever.\n\nAll of this is super-fragile code.  Finding out which code paths will\nlead to an eventual completion and which do not is hard to see:\n\n- Some functions like netfs_create_write_req() allocate a request, but\n  will never submit any I/O.\n\n- netfs_unbuffered_read_iter_locked() calls netfs_unbuffered_read()\n  and then netfs_put_request(); however, netfs_unbuffered_read() can\n  also fail early before submitting the I/O request, therefore another\n  netfs_put_request() call must be added there.\n\nA rule of thumb is that functions that return a `netfs_io_request` do\nnot submit I/O, and all of their callers must be checked.\n\nFor my taste, the whole netfs code needs an overhaul to make reference\ncounting easier to understand and less fragile & obscure.  But to fix\nthis bug here and now and produce a patch that is adequate for a\nstable backport, I tried a minimal approach that quickly frees the\nrequest object upon early failure.\n\nI decided against adding a second netfs_put_request() each time\nbecause that would cause code duplication which obscures the code\nfurther.  Instead, I added the function netfs_put_failed_request()\nwhich frees such a failed request synchronously under the assumption\nthat the reference count is exactly 2 (as initially set by\nnetfs_alloc_request() and never touched), verified by a\nWARN_ON_ONCE().  It then deinitializes the request object (without\ngoing through the \"cleanup_work\" indirection) and frees the allocation\n(with RCU protection to protect against concurrent access by\nnetfs_requests_seq_start()).\n\nAll code paths that fail early have been changed to call\nnetfs_put_failed_request() instead of netfs_put_request().\nAdditionally, I have added a netfs_put_request() call to\nnetfs_unbuffered_read() as explained above because the\nnetfs_put_failed_request() approach does not work there.",
  "datePublished": "Oct 20, 2025, 6:30:33 PM",
  "dateUpdated": "Oct 20, 2025, 6:30:33 PM",
  "baseScore": 0.0,
  "references": [
    "https://git.kernel.org/stable/c/8df142e93098b4531fadb5dfcf93087649f570b3",
    "https://git.kernel.org/stable/c/4d428dca252c858bfac691c31fa95d26cd008706",
    "https://nvd.nist.gov/vuln/detail/CVE-2025-40007"
  ],
  "aliases": [
    "CVE-2025-40007"
  ],
  "assigner": "Linux",
  "epss": 0.0,
  "enisaIdProduct": [
    {
      "id": "10b35274-5dcb-378e-8da5-25c9f748287e",
      "product": {
        "name": "Linux"
      },
      "product_version": "patch: 6.17"
    },
    {
      "id": "15f541ba-2eb0-3602-92b1-f75b4ddaa281",
      "product": {
        "name": "Linux"
      },
      "product_version": "patch: 6.16.10"
    },
    {
      "id": "62907375-38ff-3f75-8a15-10e3e99c785a",
      "product": {
        "name": "Linux"
      },
      "product_version": "1a8360c2eed3b292ed654c2ac61b09de4a80e298"
    },
    {
      "id": "759d41c2-223d-37b6-88f0-998baa46aff5",
      "product": {
        "name": "Linux"
      },
      "product_version": "20d72b00ca814d748f5663484e5c53bb2bf37a3a <4d428dca252c858bfac691c31fa95d26cd008706"
    },
    {
      "id": "79a25983-86cc-3fed-9f3f-bb27f3ef6a44",
      "product": {
        "name": "Linux"
      },
      "product_version": "patch: 0"
    },
    {
      "id": "92218929-d845-3cb9-8d62-e029a2c6ce0c",
      "product": {
        "name": "Linux"
      },
      "product_version": "6.16"
    },
    {
      "id": "9f8a12f5-c70b-3968-9f46-ca47998d662e",
      "product": {
        "name": "Linux"
      },
      "product_version": "20d72b00ca814d748f5663484e5c53bb2bf37a3a <8df142e93098b4531fadb5dfcf93087649f570b3"
    }
  ],
  "enisaIdVendor": [
    {
      "id": "6ad5e75a-b127-376f-a0d6-ecb22c911768",
      "vendor": {
        "name": "Linux"
      }
    }
  ],
  "cve": "CVE-2025-40007"
}